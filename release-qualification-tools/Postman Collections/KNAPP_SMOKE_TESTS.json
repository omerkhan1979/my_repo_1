{
	"info": {
		"_postman_id": "0a10db63-a6e4-4231-b97b-2ad5d2cd5010",
		"name": "KNAPP Smoke Test",
		"description": "This collection is created for easy pre-set up for a smoke test during the **KNAPP PRODUCTION DEPLOY**.\n<h3>Production Testing</h3>\nTo run on Prod make sure:</br>\n\n1. You have an admin user for Prod environment you're testing\n2. Your credentials are filled in **FIREBASE_LOGIN** and **FIREBASE_PASSWORD** environment variables\n3. **RUN_IN_PROD** variable in Globals is set to true\n\n<H1>Sequence of actions:</H1>\n\n<h3> 1. Find products for order </h3>\n\n**Dependency**: NO </br>\n**Request**: Get Ambient and Chilled Items </br>\n\n<H3> 2. Create an Order. </H3>\n\n**Dependency**: YES. Dependent on previously found items (**#1**). </br>\n**Request**: CreateOrder</br>\n\n<H3>3. Split order. </H3>\n\n**Dependency**: YES. Order is created </br>\n**Request**: orderSplit </br>\n\n<H3> 4. Get Inventory of items. </H3> \n\n**Dependency**: YES. Dependent on previously found items (**#1**). </br>\n**Request**: Get Number of items from the Inv Snapshot </br>\n\n<H3> 5. Decanting Results </H3>\n\n**Dependency**: NO. </br>\n**Request**: Get most recent products adjustments </br>\n\n<H3> 6. Specific Items Decanting Results </H3>\n\n**Dependency**: NO. </br>\n**Request**: Check specific item adjustments in last N minutes </br>\n\n<H3> 7. Cancel order </H3>\n\n**Dependency**: YES. Order is created </br>\n**Request**: Cancel order </br>",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Common",
			"item": [
				{
					"name": " MFC 1",
					"item": [
						{
							"name": "Get Ambient and Chilled Items",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3fbfafdc-e83f-4edf-b5cc-c56945d8d0f8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4430fe6c-c2b4-40b4-a439-00975de272f5",
										"exec": [
											"//number of chilled products to be found (change the number if you need more)",
											"var c = 1;",
											"//number of ambient products to be found (change the number if you need more)",
											"var a = 2;",
											"",
											"var osrProducts = []; //all products from the selves-snapshot that match \"address=01K\"",
											"var qty = 5;",
											"var chilledItems = [];",
											"var ambientItems = [];",
											"var products = []; //result array to store all found products",
											"",
											"console.log(\"====================== Pulling Chilled and Ambient Products for \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ======================\");",
											"",
											"// clear any previously saved data",
											"pm.collectionVariables.unset('productsJson');",
											"",
											"var data = pm.response.json();",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getOsrProducts() {",
											"    data.success.forEach(shelf => {",
											"        if (shelf.address == \"01K\" && shelf[\"qty-total\"] >= qty) {",
											"        osrProducts.push(shelf[\"product-id\"]);",
											"     }",
											"    })",
											"}",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    getOsrProducts();",
											"",
											"    for (i = 0; i < osrProducts.length; ) {",
											"    ",
											"        if (i + 10 <= osrProducts.length) {",
											"        var prodArr = osrProducts.slice(i, i+10);",
											"",
											"        } else {",
											"            var prodArr = osrProducts.slice(i, osrProducts.length - 1);",
											"        }",
											"        ",
											"        //get Fulfillment articles",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"",
											"        //find ambient and chilled items and save to array",
											"        for (j = 0; j < prodArr.length; j++) {",
											"            var prod = prodArr[j];",
											"            ",
											"            if(ffResult[prod].value!= null) {",
											"                let temp = ffResult[prod].value[\"temperature-zone\"];",
											"                if(temp == \"chilled\" && chilledItems.length < c) {",
											"                    chilledItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"chilled\";",
											"                    ",
											"                    products.push(item);",
											"",
											"                } else if(temp == \"ambient\" && ambientItems.length < a) {",
											"                    ambientItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"ambient\";",
											"",
											"                    products.push(item);",
											"                    ",
											"                } else if(chilledItems.length == c && ambientItems.length == a) {",
											"                    break;",
											"                }",
											"            }    ",
											"        }",
											"",
											"        if(chilledItems.length == c && ambientItems.length == a) {",
											"            break;",
											"        }",
											"        i+=10;    ",
											"    }",
											"",
											"    // saving found products to json",
											"    var json = {};",
											"    json[\"products\"] = products; ",
											"    pm.collectionVariables.set('productsJson', JSON.stringify(json));",
											"",
											"    console.log(\"=================================== \" + products.length + \" products found \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ===================================\");",
											"",
											"    products.forEach(prod => console.log(prod));",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"})();",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "d0203249-ecc9-41ae-9b49-66951c3aafe1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot",
								"description": "Response return the items stored on OSR (01K) shelves. The script in the **Tests** will then call the getFulfillmentArticle request to find the specified number of ambient and chilled items. </br>\nTo change the number of chilled and/or ambient items, go to the **Tests** tab and change the var:\n\n    var c = 2; //number of chilled items\n    var a = 2; //number of ambient products\n\nThe resulted json array will be written in collection variable **productsJson**, to be later retrieved. </br>\n\n**Found Ambient and Chilled products are printed in console**\n____________________________________________"
							},
							"response": []
						},
						{
							"name": "Get Ambient, Chilled, and Frozen Items",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3fbfafdc-e83f-4edf-b5cc-c56945d8d0f8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4430fe6c-c2b4-40b4-a439-00975de272f5",
										"exec": [
											"//number of chilled products to be found (change the number if you need more)",
											"var c = 1;",
											"//number of ambient products to be found (change the number if you need more)",
											"var a = 2;",
											"",
											"var osrProducts = []; //all products from the selves-snapshot that match \"address=01K\"",
											"var qty = 5;",
											"var chilledItems = [];",
											"var ambientItems = [];",
											"var products = []; //result array to store all found products",
											"",
											"console.log(\"====================== Pulling Chilled and Ambient Products for \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ======================\");",
											"",
											"// clear any previously saved data",
											"pm.collectionVariables.unset('productsJson');",
											"",
											"var data = pm.response.json();",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getOsrProducts() {",
											"    data.success.forEach(shelf => {",
											"        if (shelf.address == \"01K\" && shelf[\"qty-total\"] >= qty) {",
											"        osrProducts.push(shelf[\"product-id\"]);",
											"     }",
											"    })",
											"}",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    getOsrProducts();",
											"",
											"    for (i = 0; i < osrProducts.length; ) {",
											"    ",
											"        if (i + 10 <= osrProducts.length) {",
											"        var prodArr = osrProducts.slice(i, i+10);",
											"",
											"        } else {",
											"            var prodArr = osrProducts.slice(i, osrProducts.length - 1);",
											"        }",
											"        ",
											"        //get Fulfillment articles",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"",
											"        //find ambient and chilled items and save to array",
											"        for (j = 0; j < prodArr.length; j++) {",
											"            var prod = prodArr[j];",
											"            ",
											"            if(ffResult[prod].value!= null) {",
											"                let temp = ffResult[prod].value[\"temperature-zone\"];",
											"                if(temp == \"chilled\" && chilledItems.length < c) {",
											"                    chilledItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"chilled\";",
											"                    ",
											"                    products.push(item);",
											"",
											"                } else if(temp == \"ambient\" && ambientItems.length < a) {",
											"                    ambientItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"ambient\";",
											"",
											"                    products.push(item);",
											"                    ",
											"                } else if(chilledItems.length == c && ambientItems.length == a) {",
											"                    break;",
											"                }",
											"            }    ",
											"        }",
											"",
											"        if(chilledItems.length == c && ambientItems.length == a) {",
											"            break;",
											"        }",
											"        i+=10;    ",
											"    }",
											"",
											"    // saving found products to json",
											"    var json = {};",
											"    json[\"products\"] = products; ",
											"    pm.collectionVariables.set('productsJson', JSON.stringify(json));",
											"",
											"    console.log(\"=================================== \" + products.length + \" products found \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ===================================\");",
											"",
											"    products.forEach(prod => console.log(prod));",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"})();",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "989cc46e-eb53-4e95-8107-e92c054dc303",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot",
								"description": "Response return the items stored on OSR (01K) shelves. The script in the **Tests** will then call the getFulfillmentArticle request to find the specified number of ambient and chilled items. </br>\nTo change the number of chilled and/or ambient items, go to the **Tests** tab and change the var:\n\n    var c = 2; //number of chilled items\n    var a = 2; //number of ambient products\n\nThe resulted json array will be written in collection variable **productsJson**, to be later retrieved. </br>\n\n**Found Ambient and Chilled products are printed in console**\n____________________________________________"
							},
							"response": []
						},
						{
							"name": "Get Ambient Items",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3fbfafdc-e83f-4edf-b5cc-c56945d8d0f8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4430fe6c-c2b4-40b4-a439-00975de272f5",
										"exec": [
											"//number of chilled products to be found (change the number if you need more)",
											"var c = 1;",
											"//number of ambient products to be found (change the number if you need more)",
											"var a = 2;",
											"",
											"var osrProducts = []; //all products from the selves-snapshot that match \"address=01K\"",
											"var qty = 5;",
											"var chilledItems = [];",
											"var ambientItems = [];",
											"var products = []; //result array to store all found products",
											"",
											"console.log(\"====================== Pulling Chilled and Ambient Products for \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ======================\");",
											"",
											"// clear any previously saved data",
											"pm.collectionVariables.unset('productsJson');",
											"",
											"var data = pm.response.json();",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getOsrProducts() {",
											"    data.success.forEach(shelf => {",
											"        if (shelf.address == \"01K\" && shelf[\"qty-total\"] >= qty) {",
											"        osrProducts.push(shelf[\"product-id\"]);",
											"     }",
											"    })",
											"}",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    getOsrProducts();",
											"",
											"    for (i = 0; i < osrProducts.length; ) {",
											"    ",
											"        if (i + 10 <= osrProducts.length) {",
											"        var prodArr = osrProducts.slice(i, i+10);",
											"",
											"        } else {",
											"            var prodArr = osrProducts.slice(i, osrProducts.length - 1);",
											"        }",
											"        ",
											"        //get Fulfillment articles",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"",
											"        //find ambient and chilled items and save to array",
											"        for (j = 0; j < prodArr.length; j++) {",
											"            var prod = prodArr[j];",
											"            ",
											"            if(ffResult[prod].value!= null) {",
											"                let temp = ffResult[prod].value[\"temperature-zone\"];",
											"                if(temp == \"chilled\" && chilledItems.length < c) {",
											"                    chilledItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"chilled\";",
											"                    ",
											"                    products.push(item);",
											"",
											"                } else if(temp == \"ambient\" && ambientItems.length < a) {",
											"                    ambientItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"ambient\";",
											"",
											"                    products.push(item);",
											"                    ",
											"                } else if(chilledItems.length == c && ambientItems.length == a) {",
											"                    break;",
											"                }",
											"            }    ",
											"        }",
											"",
											"        if(chilledItems.length == c && ambientItems.length == a) {",
											"            break;",
											"        }",
											"        i+=10;    ",
											"    }",
											"",
											"    // saving found products to json",
											"    var json = {};",
											"    json[\"products\"] = products; ",
											"    pm.collectionVariables.set('productsJson', JSON.stringify(json));",
											"",
											"    console.log(\"=================================== \" + products.length + \" products found \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ===================================\");",
											"",
											"    products.forEach(prod => console.log(prod));",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"})();",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "0b247318-d8ce-46f5-a60b-20681f7687a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot",
								"description": "Response return the items stored on OSR (01K) shelves. The script in the **Tests** will then call the getFulfillmentArticle request to find the specified number of ambient and chilled items. </br>\nTo change the number of chilled and/or ambient items, go to the **Tests** tab and change the var:\n\n    var c = 2; //number of chilled items\n    var a = 2; //number of ambient products\n\nThe resulted json array will be written in collection variable **productsJson**, to be later retrieved. </br>\n\n**Found Ambient and Chilled products are printed in console**\n____________________________________________"
							},
							"response": []
						},
						{
							"name": "Get Manual Products",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3fbfafdc-e83f-4edf-b5cc-c56945d8d0f8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4430fe6c-c2b4-40b4-a439-00975de272f5",
										"exec": [
											"//number of chilled products to be found (change the number if you need more)",
											"var c = 1;",
											"//number of ambient products to be found (change the number if you need more)",
											"var a = 2;",
											"",
											"var manualProducts = []; //all products from the selves-snapshot that match \"address!=01K\"",
											"var qty = 5;",
											"var chilledItems = [];",
											"var ambientItems = [];",
											"var products = []; //result array to store all found products",
											"",
											"console.log(\"====================== Pulling Manual Chilled and Ambient Products for \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ======================\");",
											"",
											"// clear any previously saved data",
											"pm.collectionVariables.unset('productsJson');",
											"",
											"var data = pm.response.json();",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getManualProducts() {",
											"    data.success.forEach(shelf => {",
											"        if (shelf.address != \"01K\" && shelf[\"qty-total\"] >= qty) {",
											"        manualProducts.push(shelf[\"product-id\"]);",
											"     }",
											"    })",
											"}",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    getManualProducts();",
											"",
											"    for (i = 0; i < manualProducts.length; ) {",
											"    ",
											"        if (i + 10 <= manualProducts.length) {",
											"        var prodArr = manualProducts.slice(i, i+10);",
											"",
											"        } else {",
											"            var prodArr = manualProducts.slice(i, manualProducts.length - 1);",
											"        }",
											"        ",
											"        //get Fulfillment articles",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"",
											"        //find ambient and chilled items and save to array",
											"        for (j = 0; j < prodArr.length; j++) {",
											"            var prod = prodArr[j];",
											"            ",
											"            if(ffResult[prod].value!= null) {",
											"                let temp = ffResult[prod].value[\"temperature-zone\"];",
											"                if(temp == \"chilled\" && chilledItems.length < c) {",
											"                    chilledItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"chilled\";",
											"                    ",
											"                    products.push(item);",
											"",
											"                } else if(temp == \"ambient\" && ambientItems.length < a) {",
											"                    ambientItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"ambient\";",
											"",
											"                    products.push(item);",
											"                    ",
											"                } else if(chilledItems.length == c && ambientItems.length == a) {",
											"                    break;",
											"                }",
											"            }    ",
											"        }",
											"",
											"        if(chilledItems.length == c && ambientItems.length == a) {",
											"            break;",
											"        }",
											"        i+=10;    ",
											"    }",
											"",
											"    // saving found products to json",
											"    var json = {};",
											"    json[\"products\"] = products; ",
											"    pm.collectionVariables.set('productsJson', JSON.stringify(json));",
											"",
											"    console.log(\"=================================== \" + products.length + \" products found \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ===================================\");",
											"",
											"    products.forEach(prod => console.log(prod));",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"})();",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "2c720294-51ad-451a-848f-29264c52eebe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot",
								"description": "Response return the items stored on OSR (01K) shelves. The script in the **Tests** will then call the getFulfillmentArticle request to find the specified number of ambient and chilled items. </br>\nTo change the number of chilled and/or ambient items, go to the **Tests** tab and change the var:\n\n    var c = 2; //number of chilled items\n    var a = 2; //number of ambient products\n\nThe resulted json array will be written in collection variable **productsJson**, to be later retrieved. </br>\n\n**Found Ambient and Chilled products are printed in console**\n____________________________________________"
							},
							"response": []
						},
						{
							"name": "CreateOrder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19c8dc53-ee89-4076-a4b2-cb9630a47f90",
										"exec": [
											"// env prod check",
											"var envIsProd = !(pm.environment.name.toLowerCase().indexOf(\"prod\") === -1);",
											"var runIsProd = pm.globals.get(\"RUN_IN_PROD\") === 'true';",
											"console.log(\"Running in env '\" + pm.environment.name + \"' [\" + (envIsProd ? \"prod\" : \"staging\") + \"]\");",
											"console.log(\"Confirmation string RUN_IN_PROD=\" + runIsProd);",
											"if (envIsProd && !runIsProd) {",
											"  throw Error(\"Running in prod is prohibited!\");",
											"}",
											"",
											"console.log(\"================================= Creating order on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ==================================\");",
											"",
											"//generate order number",
											"var moment = require('moment');",
											"var orderId = moment().format(\"YYYYMMDDHHmm\");",
											"",
											"pm.collectionVariables.set(\"orderId\", orderId);",
											"",
											"//set fulfillment date-time and stage-by-date-time for Order",
											"var env = pm.environment.get(\"ENV\");",
											"",
											"var tomorrow = (Date.now() + 24*60*60*1000);",
											"var targetDate = new Date(tomorrow).toISOString().slice(0,-13) + pm.environment.get(\"ORDER_TIME\");;",
											"",
											"pm.collectionVariables.set(\"orderDateTime\", \"\\\"\" + targetDate + \"\\\"\");",
											"pm.collectionVariables.set(\"stageByDateTime\", targetDate);",
											"",
											"//service-window-start for retailers on Service Contracts, fulfillment-datetime on MFC Cutoff",
											"var dateTimeParam;",
											"dateTimeParam = env.includes(\"winter\") ? \"fulfillment-datetime\" : \"service-window-start\";",
											"pm.collectionVariables.set(\"orderContractParam\",dateTimeParam);",
											"",
											"//generate order line items, using found chilled and ambient products",
											"var lineItems = [];",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson\")).products;",
											"products.forEach(prod => lineItems.push(lineItemJson(prod[\"product-id\"])));",
											"pm.collectionVariables.set(\"lineItems\",lineItems);",
											"",
											"console.info(\"Creating Order# \" + orderId + \" on \" + pm.environment.get('ENV') + \" \" + pm.environment.get(\"MFC_TOM_CODE\"));",
											"",
											"function lineItemJson(product) {",
											"    return JSON.stringify(",
											"        {",
											"            \"takeoff-item-ids\": [",
											"                product",
											"            ],",
											"            \"ecom-item-id\": product,",
											"            \"requested-quantity\": 1,",
											"            \"ecom-line-id\": \"1\"",
											"        })",
											"}",
											"",
											"//use spoke Id for Winter in body",
											"if(env.includes(\"winter\")) {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"SPOKE_ID_1\"));",
											"} else {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"MFC_TOM_CODE\"));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7e17c311-4526-447b-aa1c-73b2d1a43aee",
										"exec": [
											"var jsondata = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Expect response success: true\", function() {",
											"    pm.expect(jsondata.success).is.equal(true);",
											"})",
											"",
											"if (pm.response.code != 200) {",
											"    console.log(\"!!! ERROR in Order creation!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"",
											"    if (jsondata.message.includes(\"Unconfigured mfc-cutoff-lite\") || ",
											"        jsondata.message.includes(\"No suitable contract found\")) {",
											"        console.log (\"Check MFC CUTOFF/Service Contract time in Environment Variables ORDER_TIME\");",
											"    }",
											"    console.log(\"===============================================================================================\");",
											"}",
											"",
											"if(jsondata.success) {",
											"    console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId\") + \" created successfully on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" =======================\");",
											"    console.log(\"===============================================================================================\");",
											"}",
											"pm.collectionVariables.unset(\"orderContractParam\");",
											"pm.collectionVariables.unset(\"spoke\");",
											"pm.collectionVariables.unset(\"stageByDateTime\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "000693ea-0929-434f-890f-3750fd27f672",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"store-id\": \"{{MFC_TOM_CODE}}\",\n    \"spoke-id\": \"{{spoke}}\",\n    \"order-id\": \"{{orderId}}\",\n    \"ecom-order-id\": \"{{orderId}}\",\n    \"corp-order-id\": \"{{orderId}}\",\n    \"line-items\": [{{lineItems}}],\n    \"route-number\": \"B1\",\n    \"shipping-label\": [\n        \"System QA\",\n        \"Test Order\",\n        \"Takeoff\"\n    ],\n    \"stop-number\": 4,\n    \"shift-number\": 1,\n    \"service-type\": \"DELIVERY\",\n    \"{{orderContractParam}}\": {{orderDateTime}},\n    \"stage-by-datetime\": \"{{stageByDateTime}}\",\n    \"ecom-order-status\": \"{{ECOM_ORDER_STATUS}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://co-{{ENV}}.tom.takeoff.com/v3/order",
								"description": "Creates an order, using OMS endpoint.</br>\n\nThe orderId is built in **Pre-req** in the format and saved into collection variable **orderId**:\n\n    var orderId = \"SQ_\" + date + \"_1\";\n\nAn example: **SQ_210309_1**</br>\n\nThe products retrived from the **productJson** collection variable, that are founf in \"Get Ambient and Chilled Items\" request"
							},
							"response": []
						},
						{
							"name": "orderSplit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecc4f508-7bcf-4a32-9032-51c08a7e8f5e",
										"exec": [
											"if (pm.response.code != 200) {",
											"    var jsondata = pm.response.json();",
											"    console.info(\"!!! ERROR in Order split!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"}",
											"pm.test(\"Success\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    ",
											"    if(jsondata.success)",
											"    console.log(\"================================ \"+ jsonData.message + \" ================================\");",
											"    console.log(\"===============================================================================================\");",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"    console.log(\"================ Split process has started for order \" + pm.collectionVariables.get(\"orderId\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ================\");",
											"    console.log(\"===============================================================================================\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0592e60a-26c2-4980-9f90-7a39cec474ed",
										"exec": [
											"console.log(\"==================================== Splitting the order ===================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "ea3301da-6bde-4c47-9d37-370a17b20192",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"url": "https://co-{{ENV}}.tom.takeoff.com/v3/order/split/{{orderId}}"
							},
							"response": []
						},
						{
							"name": "Get number of items from the order from Inv Snapshot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "badda9ed-79a8-478b-9b5c-b7f6f48b9acc",
										"exec": [
											"var data = pm.response.json();",
											"var inventory = [];",
											"inventory = data.success;",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson\")).products;",
											"",
											"console.log(\"========================= Calculating Products Quantity on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ==========================\");",
											"// console.log(products);",
											"products.forEach(prod => printProductQty(prod));",
											"",
											"function printProductQty(item) {",
											"    for( i = 0; i < inventory.length; i++) {",
											"            if(inventory[i][\"product-id\"] == item[\"product-id\"]  && inventory[i][\"address\"] == \"01K\") {",
											"                item[\"qty-total\"] = inventory[i][\"qty-total\"];",
											"                console.info(\"product-id: \" + item[\"product-id\"] + \", qty-total: \" + item[\"qty-total\"]);",
											"            }",
											"        }",
											"}",
											"console.log(\"===============================================================================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "4d322a22-f979-4b73-b69c-453e4a4353c0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot",
								"description": "The script in the **Tests** tab will print the quantity of the products from **productsJson** collection variable (Products that were found beforehand in the **Get Ambient and Chilled Products** request)"
							},
							"response": []
						},
						{
							"name": "Get most recent products adjustments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30e78af8-6327-4580-84f9-1aee4dc3f838",
										"exec": [
											"var n = 1; //specify number of minutes (look up data for last N minutes)",
											"pm.collectionVariables.set(\"n\", n);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "723c3e43-1010-4b16-95f3-866947958bda",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"",
											"//get all adjusted products",
											"var productsMap = new Map;",
											"",
											"operations.forEach(op => {",
											"    if(!productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"    }",
											"",
											"    let item = {};",
											"    item[\"address\"] = op.address;",
											"    item[\"qty-before\"] = op[\"quantity-before\"];",
											"    item[\"qty\"] = op.quantity;",
											"    if(op.comment != null) {",
											"        item[\"comment\"] = op.comment;",
											"    }",
											"    productsMap.get(op.product)[\"adjustments\"].push(item);",
											"});",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"",
											"    var prodArr = Array.from(productsMap.keys());",
											"    ",
											"    for (j = 0; j < prodArr.length; j++) {",
											"        var prod = prodArr[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;  ",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"    }",
											"",
											"    console.log(\"=================== All items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ====================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c52e0edb-53fe-4755-82d1-e1145b76f040",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/adjustments",
								"description": "Responce returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-req** tab:\n\n    var n = 240; //specify number of minutes (look up data for last N minutes)\n\nThe result is printed in the console in the format:</br>\n    \n    {\"product\":\"00077901008589\",\"address\":\"01K\",\"comment\":\"PO=2103091897737\",\"temperature-zone\":\"chilled\"}"
							},
							"response": []
						},
						{
							"name": "Check specific item adjustments in last N minutes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30e78af8-6327-4580-84f9-1aee4dc3f838",
										"exec": [
											"var n = 9; //specify number of minutes (look up data for last N minutes)",
											"",
											"//specify products to look for adjustments",
											"var products = [\"00041190021376\", \"00000000091688\"];",
											"",
											"pm.collectionVariables.set(\"n\", n);",
											"pm.collectionVariables.set(\"products\", products);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "723c3e43-1010-4b16-95f3-866947958bda",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"var products = pm.collectionVariables.get(\"products\"); // products to look for adjustments",
											"var productsMap = new Map();",
											"",
											"products.forEach(prod => productsMap.set(prod, {\"message\":\"Adjustments are not found for current product\"}));",
											"",
											"operations.forEach(op => {",
											"    if(productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"",
											"        let item = {};",
											"        item[\"address\"] = op.address;",
											"        item[\"qty-before\"] = op[\"quantity-before\"];",
											"        item[\"qty\"] = op.quantity;",
											"        if(op.comment != null) {",
											"            item[\"comment\"] = op.comment;",
											"        }",
											"        productsMap.get(op.product)[\"adjustments\"].push(item);",
											"    }",
											"})",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"    ",
											"    for (j = 0; j < products.length; j++) {",
											"        var prod = products[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod && productsMap.get(prod).hasOwnProperty(\"adjustments\")) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(products);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"",
											"    }",
											"",
											"    console.log(\"================= Specific items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ==================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "20e28532-8e44-4bc8-8114-c89cfb20b7a5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/adjustments",
								"description": "Response returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-req** tab:\n\n    var n = 5; //specify number of minutes (look up data for last N minutes)\n\nChange the product to look for in array: \n\n    //specify products to look for adjustments\n    var products = [\"123\"];\n    pm.collectionVariables.set(\"products\", products);\n\nThe result is printed in the console in the format:</br>\n    \n    00000000091688, chilled: {\"address\":\"01K\",\"qty-before\":8,\"qty\":-1,\"comment\":\"ORDER=29571874;\",\"qty-now\":7}"
							},
							"response": []
						},
						{
							"name": "Cancel order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f6248c4-9eeb-4f2e-9a9d-7ed64570283c",
										"exec": [
											"setTimeout(function () { }, [1000]);",
											"",
											"var response = pm.response.json();",
											"",
											"console.log(\"order \" + response.id + \", status is \" + response.status);",
											"",
											"pm.test(\"Order status is cancelled\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.status).to.eql(\"cancelled\");",
											"});",
											"",
											"if (response.status == \"cancelled\") {",
											" console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" has been cancelled =======================\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eeb46db4-321b-45d1-9659-952a66fd1a91",
										"exec": [
											"console.log(\"================================= Cancelling an order ==================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "e709643e-1f65-4371-b128-2d7262427a55",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"cancelled\",\r\n  \"user-id\": \"string\",\r\n  \"force-update\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://oms-{{ENV}}.tom.takeoff.com/v3/order/{{orderId}}/status",
								"description": "Request cancels the order, created in CreateOrder Request."
							},
							"response": []
						},
						{
							"name": "IMS ramp state tote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96d09605-0c6d-4734-b491-938bb8c39cce",
										"exec": [
											"var data = pm.response.json();",
											"",
											"var order_id = pm.environment.get(\"LAST_ORDER_ID\");",
											"ramp_order_id = \"z-\" + order_id",
											"var order = data.success.orders[order_id]",
											"if (order) {",
											"    pm.collectionVariables.set(\"tote_id\", order[0]);",
											"} else {",
											"    console.log(pm.environment.get(\"LAST_ORDER_ID\") + \" has no totes on ramp\")",
											"    pm.collectionVariables.set(\"tote_id\", \"\");",
											"}",
											"console.log(pm.collectionVariables.get(\"tote_id\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "0822be0d-4a0f-4d2f-a995-47358cf049b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"args\": [\"{{MFC_TOM_CODE}}\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/ramp-state"
							},
							"response": []
						},
						{
							"name": "clear ramp",
							"_postman_id": "9eb81d5f-0a79-478d-906c-98f629648e4d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE}}\", \"\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/free-up-channel"
							},
							"response": []
						}
					],
					"_postman_id": "31690d62-8787-405d-b54e-c26118d787c6",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "997a17dd-3b5e-45f9-b247-466484e15480"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a9a1132e-7670-4764-8713-2f8a79a19512"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MFC 2",
					"item": [
						{
							"name": "Get Ambient and Chilled Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4f73ae7-16ff-4f3b-9545-8ab900287426",
										"exec": [
											"//number of chilled products to be found (change the number if you need more)",
											"var c = 1;",
											"//number of ambient products to be found (change the number if you need more)",
											"var a = 2;",
											"",
											"var osrProducts = []; //all products from the selves-snapshot that match \"address=01K\"",
											"var qty = 5;",
											"var chilledItems = [];",
											"var ambientItems = [];",
											"var products = []; //result array to store all found products",
											"",
											"console.log(\"====================== Pulling Chilled and Ambient Products for \" + pm.environment.get(\"MFC_TOM_CODE_2\") + \" ======================\");",
											"",
											"// clear any previously saved data",
											"pm.collectionVariables.unset('productsJson2');",
											"",
											"var data = pm.response.json();",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE_2\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getOsrProducts() {",
											"    data.success.forEach(shelf => {",
											"        if (shelf.address == \"01K\" && shelf[\"qty-total\"] >= qty) {",
											"        osrProducts.push(shelf[\"product-id\"]);",
											"     }",
											"    })",
											"}",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    getOsrProducts();",
											"",
											"    for (i = 0; i < osrProducts.length; ) {",
											"    ",
											"        if (i + 10 <= osrProducts.length) {",
											"        var prodArr = osrProducts.slice(i, i+10);",
											"",
											"        } else {",
											"            var prodArr = osrProducts.slice(i, osrProducts.length - 1);",
											"        }",
											"        ",
											"        //get Fulfillment articles",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"",
											"        //find ambient and chilled items and save to array",
											"        for (j = 0; j < prodArr.length; j++) {",
											"            var prod = prodArr[j];",
											"            ",
											"            if(ffResult[prod].value!= null) {",
											"                let temp = ffResult[prod].value[\"temperature-zone\"];",
											"                if(temp == \"chilled\" && chilledItems.length < c) {",
											"                    chilledItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"chilled\";",
											"                    ",
											"                    products.push(item);",
											"",
											"                } else if(temp == \"ambient\" && ambientItems.length < a) {",
											"                    ambientItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"ambient\";",
											"",
											"                    products.push(item);",
											"                    ",
											"                } else if(chilledItems.length == c && ambientItems.length == a) {",
											"                    break;",
											"                }",
											"            }    ",
											"        }",
											"",
											"        if(chilledItems.length == c && ambientItems.length == a) {",
											"            break;",
											"        }",
											"        i+=10;    ",
											"    }",
											"",
											"    // saving found products to json",
											"    var json = {};",
											"    json[\"products\"] = products; ",
											"    pm.collectionVariables.set('productsJson2', JSON.stringify(json));",
											"",
											"    console.log(\"=================================== \" + products.length + \" products found \" + pm.environment.get(\"MFC_TOM_CODE_2\") + \" ===================================\");",
											"",
											"    products.forEach(prod => console.log(prod));",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"})();",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "df55c7ec-7a5d-41db-95bb-791f0dc6d791",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE_2}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot",
								"description": "Response return the items stored on OSR (01K) shelves. The script in the **Tests** will then call the getFulfillmentArticle request to find the specified number of ambient and chilled items. </br>\nTo change the number of chilled and/or ambient items, go to Tests tab and change the var:\n\n    var c = 2; //number of chilled items\n    var a = 2; //number of ambient products\n\nThe resulted json array will be written in collection variable **productsJson**, to be later retrieved. </br>\n\n**Found Ambient and Chilled products are printed in console**\n____________________________________________"
							},
							"response": []
						},
						{
							"name": "CreateOrder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3adbd38e-72d7-4a1f-b659-05d57f24040b",
										"exec": [
											"// env prod check",
											"var envIsProd = !(pm.environment.name.toLowerCase().indexOf(\"prod\") === -1);",
											"var runIsProd = pm.globals.get(\"RUN_IN_PROD\") === 'true';",
											"console.log(\"Running in env '\" + pm.environment.name + \"' [\" + (envIsProd ? \"prod\" : \"staging\") + \"]\");",
											"console.log(\"Confirmation string RUN_IN_PROD=\" + runIsProd);",
											"if (envIsProd && !runIsProd) {",
											"  throw Error(\"Running in prod is prohibited!\");",
											"}",
											"",
											"console.log(\"================================= Creating order on \" + pm.environment.get(\"MFC_TOM_CODE_2\") + \" ==================================\");",
											"",
											"//generate order number in format YYYYMMDDHHmm",
											"var moment = require('moment');",
											"var orderId2 = moment().format(\"YYYYMMDDHHmm\");",
											"",
											"pm.collectionVariables.set(\"orderId2\", orderId2);",
											"",
											"//set fulfillment date-time and stage-by-date-time for Order",
											"var env = pm.environment.get(\"ENV\");",
											"",
											"var tomorrow = (Date.now() + 24*60*60*1000);",
											"var targetDate = new Date(tomorrow).toISOString().slice(0,-13) + pm.environment.get(\"ORDER_TIME\");;",
											"",
											"pm.collectionVariables.unset(\"orderDateTime\");",
											"pm.collectionVariables.unset(\"stageByDateTime\");",
											"",
											"pm.collectionVariables.set(\"orderDateTime\", \"\\\"\" + targetDate + \"\\\"\");",
											"pm.collectionVariables.set(\"stageByDateTime\", targetDate);",
											"",
											"//service-window-start for retailers on Service Contracts, fulfillment-datetime on MFC Cutoff",
											"var dateTimeParam;",
											"dateTimeParam = (env.includes(\"winter\")) ? \"fulfillment-datetime\" : \"service-window-start\";",
											"pm.collectionVariables.set(\"orderContractParam\",dateTimeParam);",
											"",
											"//generate order line items, using found chilled and ambient products",
											"var lineItems = [];",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson2\")).products;",
											"products.forEach(prod => lineItems.push(lineItemJson(prod[\"product-id\"])));",
											"pm.collectionVariables.set(\"lineItems\",lineItems);",
											"",
											"console.info(\"Creating Order# \" + orderId2 + \" on \" + pm.environment.get('ENV') + \" \" + pm.environment.get(\"MFC_TOM_CODE_2\"));",
											"",
											"function lineItemJson(product) {",
											"    return JSON.stringify(",
											"        {",
											"            \"takeoff-item-ids\": [",
											"                product",
											"            ],",
											"            \"ecom-item-id\": product,",
											"            \"requested-quantity\": 1,",
											"            \"ecom-line-id\": \"1\"",
											"        })",
											"}",
											"",
											"//use spoke Id for Winter in body",
											"if(env.includes(\"winter\")) {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"SPOKE_ID_2\"));",
											"} else {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"MFC_TOM_CODE_2\"));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9ea28a63-6bfd-4def-a84e-68627a72e7e8",
										"exec": [
											"var jsondata = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Expect response success: true\", function() {",
											"    pm.expect(jsondata.success).is.equal(true);",
											"})",
											"",
											"if (pm.response.code != 200) {",
											"    console.log(\"!!! ERROR in Order creation!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"",
											"    if (jsondata.message.includes(\"Unconfigured mfc-cutoff-lite\") || ",
											"        jsondata.message.includes(\"No suitable contract found\")) {",
											"        console.log (\"Check MFC CUTOFF/Service Contract time in Environment Variables ORDER_TIME\");",
											"    }",
											"    console.log(\"===============================================================================================\");",
											"}",
											"",
											"if(jsondata.success) {",
											"    console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId2\") + \" created successfully on \" + pm.environment.get(\"MFC_TOM_CODE_2\") + \" =======================\");",
											"    console.log(\"===============================================================================================\");",
											"}",
											"pm.collectionVariables.unset(\"orderContractParam\");",
											"pm.collectionVariables.unset(\"spoke\");",
											"pm.collectionVariables.unset(\"stageByDateTime\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "b7d73994-9fbc-4222-9ef4-67cb85c73aff",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ecom-status\": \"new\",\n    \"store-id\": \"{{MFC_TOM_CODE_2}}\",\n    \"{{orderContractParam}}\": {{orderDateTime}},\n    \"ecom-payment-status\": \"none\",\n    \"spoke-id\": \"{{spoke}}\",\n    \"stage-by-datetime\": {{orderDateTime}},\n    \"order-id\": \"{{orderId2}}\",\n    \"shipping-label\": [\n        \"System QA\",\n        \"Test Order\",\n        \"Takeoff\"\n    ],\n    \"line-items\": [{{lineItems}}],\n    \"service-type\": \"DELIVERY\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://co-{{ENV}}.tom.takeoff.com/order",
								"description": "Creates an order, using OMS endpoint.</br>\n\nThe orderId is built in **Pre-req** in the format and saved into collection variable **orderId**:\n\n    var orderId = \"SQ_\" + date + \"_1\";\n\nAn example: **SQ_210309_1**</br>\n\nThe products retrived from the **productJson** collection variable, that are founf in \"Get Ambient and Chilled Items\" request"
							},
							"response": []
						},
						{
							"name": "orderSplit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39a64586-8217-42c0-8e9f-e6f68efbc862",
										"exec": [
											"if (pm.response.code != 200) {",
											"    var jsondata = pm.response.json();",
											"    console.info(\"!!! ERROR in Order split!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"}",
											"pm.test(\"Success\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    ",
											"    if(jsondata.success)",
											"    console.log(\"================================ \"+ jsonData.message + \" ================================\");",
											"    console.log(\"===============================================================================================\");",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"    console.log(\"================ Split process has started for order \" + pm.collectionVariables.get(\"orderId2\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE_2\") + \" ================\");",
											"    console.log(\"===============================================================================================\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "57137886-822c-4f09-83d5-4e23e583e42b",
										"exec": [
											"console.log(\"==================================== Splitting the order ===================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c5c9dbdd-5d8c-4c36-b1a6-00000d7dc177",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"url": "https://co-{{ENV}}.tom.takeoff.com/order/split/{{orderId2}}"
							},
							"response": []
						},
						{
							"name": "Get number of items from the order from Inv Snapshot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57046522-fa02-4ae3-a4aa-7ca288c8be11",
										"exec": [
											"var data = pm.response.json();",
											"var inventory = [];",
											"inventory = data.success;",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson2\")).products;",
											"",
											"console.log(\"========================= Calculating Products Quantity on \" + pm.environment.get(\"storeId2\") + \" ==========================\");",
											"// console.log(products);",
											"products.forEach(prod => printProductQty(prod));",
											"",
											"function printProductQty(item) {",
											"    for( i = 0; i < inventory.length; i++) {",
											"            if(inventory[i][\"product-id\"] == item[\"product-id\"] && inventory[i][\"address\"] == \"01K\") {",
											"                item[\"qty-total\"] = inventory[i][\"qty-total\"];",
											"                console.info(\"product-id: \" + item[\"product-id\"] + \", qty-total: \" + item[\"qty-total\"]);",
											"            }",
											"        }",
											"}",
											"console.log(\"===============================================================================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "5c80b714-4cb5-4d91-a997-8be81748beab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE_2}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot",
								"description": "The script in the **Tests** tab will print the quantity of the products from **productsJson** collection variable (Products that were found beforehand in the **Get Ambient and Chilled Products** request)"
							},
							"response": []
						},
						{
							"name": "Get most recent products adjustments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5894a61e-1d2e-4158-a9b2-3077e3775b1c",
										"exec": [
											"var n = 10; //specify number of minutes (look up data for last N minutes)",
											"pm.collectionVariables.set(\"n\", n);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "373e90b3-d831-43fb-8498-d92f52a3396e",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"",
											"//get all adjusted products",
											"var productsMap = new Map;",
											"",
											"operations.forEach(op => {",
											"    if(!productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"    }",
											"",
											"    let item = {};",
											"    item[\"address\"] = op.address;",
											"    item[\"qty-before\"] = op[\"quantity-before\"];",
											"    item[\"qty\"] = op.quantity;",
											"    if(op.comment != null) {",
											"        item[\"comment\"] = op.comment;",
											"    }",
											"    productsMap.get(op.product)[\"adjustments\"].push(item);",
											"});",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE_2\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE_2\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"",
											"    var prodArr = Array.from(productsMap.keys());",
											"    ",
											"    for (j = 0; j < prodArr.length; j++) {",
											"        var prod = prodArr[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;  ",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"    }",
											"",
											"    console.log(\"=================== All items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE_2\") + \" ====================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "05c39217-3aab-428c-a995-756744021f97",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE_2}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/adjustments",
								"description": "Responce returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-req** tab:\n\n    var n = 240; //specify number of minutes (look up data for last N minutes)\n\nThe result is printed in the console in the format:</br>\n    \n    {\"product\":\"00077901008589\",\"address\":\"01K\",\"comment\":\"PO=2103091897737\",\"temperature-zone\":\"chilled\"}"
							},
							"response": []
						},
						{
							"name": "Cancel order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f12018ee-5298-4c47-b02e-dcf86c4a757a",
										"exec": [
											"setTimeout(function () { }, [1000]);",
											"",
											"var response = pm.response.json();",
											"",
											"console.log(\"order \" + response.id + \", status is \" + response.status);",
											"",
											"pm.test(\"Order status is cancelled\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.status).to.eql(\"cancelled\");",
											"});",
											"",
											"if (response.status == \"cancelled\") {",
											" console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId2\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE_2\") + \" has been cancelled =======================\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "55c1660c-1b28-4a8e-b2c2-c2d9d7190305",
										"exec": [
											"console.log(\"================================= Cancelling an order ==================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "4b558d80-119f-4ea5-a78c-b067a8d514de",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}"
									}
								],
								"url": {
									"raw": "https://api-{{ENV}}.tom.takeoff.com/api/order?order-id={{orderId2}}&user-id=JqnNzDX3nDRZXlu9xnTlJuA6PqX2",
									"protocol": "https",
									"host": [
										"api-{{ENV}}",
										"tom",
										"takeoff",
										"com"
									],
									"path": [
										"api",
										"order"
									],
									"query": [
										{
											"key": "order-id",
											"value": "{{orderId2}}"
										},
										{
											"key": "user-id",
											"value": "JqnNzDX3nDRZXlu9xnTlJuA6PqX2"
										}
									]
								},
								"description": "Request cancels the order, created in CreateOrder Request."
							},
							"response": []
						},
						{
							"name": "Check specific item adjustments in last N minutes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30e78af8-6327-4580-84f9-1aee4dc3f838",
										"exec": [
											"var n = 20; //specify number of minutes (look up data for last N minutes)",
											"",
											"//specify products to look for adjustments",
											"var products = [\"00000000040273\", \"00041190465156\"];",
											"",
											"pm.collectionVariables.set(\"n\", n);",
											"pm.collectionVariables.set(\"products\", products);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "723c3e43-1010-4b16-95f3-866947958bda",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"var products = pm.collectionVariables.get(\"products\"); // products to look for adjustments",
											"var productsMap = new Map();",
											"",
											"products.forEach(prod => productsMap.set(prod, {\"message\":\"Adjustments are not found for current product\"}));",
											"",
											"operations.forEach(op => {",
											"    if(productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"",
											"        let item = {};",
											"        item[\"address\"] = op.address;",
											"        item[\"qty-before\"] = op[\"quantity-before\"];",
											"        item[\"qty\"] = op.quantity;",
											"        if(op.comment != null) {",
											"            item[\"comment\"] = op.comment;",
											"        }",
											"        productsMap.get(op.product)[\"adjustments\"].push(item);",
											"    }",
											"})",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE_2\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE_2\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"    ",
											"    for (j = 0; j < products.length; j++) {",
											"        var prod = products[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod && productsMap.get(prod).hasOwnProperty(\"adjustments\")) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(products);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"",
											"    }",
											"",
											"    console.log(\"================= Specific items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE_2\") + \" ==================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f6a282d6-f617-4f01-b36c-02357a99da0e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE_2}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/adjustments",
								"description": "Response returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-req** tab:\n\n    var n = 5; //specify number of minutes (look up data for last N minutes)\n\nChange the product to look for in array: \n\n    //specify products to look for adjustments\n    var products = [\"123\"];\n    pm.collectionVariables.set(\"products\", products);\n\nThe result is printed in the console in the format:</br>\n    \n    00000000091688, chilled: {\"address\":\"01K\",\"qty-before\":8,\"qty\":-1,\"comment\":\"ORDER=29571874;\",\"qty-now\":7}"
							},
							"response": []
						},
						{
							"name": "IMS - ramp state tote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96d09605-0c6d-4734-b491-938bb8c39cce",
										"exec": [
											"var data = pm.response.json();",
											"",
											"var order_id = pm.environment.get(\"LAST_ORDER_ID\");",
											"ramp_order_id = \"z-\" + order_id",
											"var order = data.success.orders[order_id]",
											"if (order) {",
											"    pm.collectionVariables.set(\"tote_id\", order[0]);",
											"} else {",
											"    console.log(pm.environment.get(\"LAST_ORDER_ID\") + \" has no totes on ramp\")",
											"    pm.collectionVariables.set(\"tote_id\", \"\");",
											"}",
											"console.log(pm.collectionVariables.get(\"tote_id\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "a1bff2d2-1fb6-4d0e-96a7-2e0d3913278b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"args\": [\"{{MFC_TOM_CODE_2}}\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/ramp-state"
							},
							"response": []
						},
						{
							"name": "clear ramp",
							"_postman_id": "5125a501-c674-438a-8745-894999e7a4c7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE_2}}\", \"\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/free-up-channel"
							},
							"response": []
						}
					],
					"_postman_id": "71e589a9-6a23-4994-8001-cbe887aa8b81",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "047f387f-ba73-43ae-9c23-92c0e26e6557"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "e8a41fd9-8b5e-4a82-b632-7f67d5b785cb"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MFC 3",
					"item": [
						{
							"name": "Get Ambient and Chilled Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47c9dd10-b510-42ce-821b-0221249b35f8",
										"exec": [
											"//number of chilled products to be found (change the number if you need more)",
											"var c = 1;",
											"//number of ambient products to be found (change the number if you need more)",
											"var a = 2;",
											"",
											"var osrProducts = []; //all products from the selves-snapshot that match \"address=01K\"",
											"var qty = 5;",
											"var chilledItems = [];",
											"var ambientItems = [];",
											"var products = []; //result array to store all found products",
											"",
											"console.log(\"====================== Pulling Chilled and Ambient Products for \" + pm.environment.get(\"MFC_TOM_CODE_3\") + \" ======================\");",
											"",
											"// clear any previously saved data",
											"pm.collectionVariables.unset('productsJson3');",
											"",
											"var data = pm.response.json();",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE_3\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getOsrProducts() {",
											"    data.success.forEach(shelf => {",
											"        if (shelf.address == \"01K\" && shelf[\"qty-total\"] >= qty) {",
											"        osrProducts.push(shelf[\"product-id\"]);",
											"     }",
											"    })",
											"}",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    getOsrProducts();",
											"",
											"    for (i = 0; i < osrProducts.length; ) {",
											"    ",
											"        if (i + 10 <= osrProducts.length) {",
											"        var prodArr = osrProducts.slice(i, i+10);",
											"",
											"        } else {",
											"            var prodArr = osrProducts.slice(i, osrProducts.length - 1);",
											"        }",
											"        ",
											"        //get Fulfillment articles",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"",
											"        //find ambient and chilled items and save to array",
											"        for (j = 0; j < prodArr.length; j++) {",
											"            var prod = prodArr[j];",
											"            ",
											"            if(ffResult[prod].value!= null) {",
											"                let temp = ffResult[prod].value[\"temperature-zone\"];",
											"                if(temp == \"chilled\" && chilledItems.length < c) {",
											"                    chilledItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"chilled\";",
											"                    ",
											"                    products.push(item);",
											"",
											"                } else if(temp == \"ambient\" && ambientItems.length < a) {",
											"                    ambientItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"ambient\";",
											"",
											"                    products.push(item);",
											"                    ",
											"                } else if(chilledItems.length == c && ambientItems.length == a) {",
											"                    break;",
											"                }",
											"            }    ",
											"        }",
											"",
											"        if(chilledItems.length == c && ambientItems.length == a) {",
											"            break;",
											"        }",
											"        i+=10;    ",
											"    }",
											"",
											"    // saving found products to json",
											"    var json = {};",
											"    json[\"products\"] = products; ",
											"    pm.collectionVariables.set('productsJson3', JSON.stringify(json));",
											"",
											"    console.log(\"=================================== \" + products.length + \" products found \" + pm.environment.get(\"MFC_TOM_CODE_3\") + \" ===================================\");",
											"",
											"    products.forEach(prod => console.log(prod));",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "715f6186-f722-49c0-8f3e-1c3e14883c64",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE_3}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot",
								"description": "Response return the items stored on OSR (01K) shelves. The script in the **Tests** will then call the getFulfillmentArticle request to find the specified number of ambient and chilled items. </br>\nTo change the number of chilled and/or ambient items, go to Tests tab and change the var:\n\n    var c = 2; //number of chilled items\n    var a = 2; //number of ambient products\n\nThe resulted json array will be written in collection variable **productsJson**, to be later retrieved. </br>\n\n**Found Ambient and Chilled products are printed in console**\n____________________________________________"
							},
							"response": []
						},
						{
							"name": "CreateOrder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "276377aa-bb4c-4eff-98ca-9e9de26db660",
										"exec": [
											"// env prod check",
											"var envIsProd = !(pm.environment.name.toLowerCase().indexOf(\"prod\") === -1);",
											"var runIsProd = pm.globals.get(\"RUN_IN_PROD\") === 'true';",
											"console.log(\"Running in env '\" + pm.environment.name + \"' [\" + (envIsProd ? \"prod\" : \"staging\") + \"]\");",
											"console.log(\"Confirmation string RUN_IN_PROD=\" + runIsProd);",
											"if (envIsProd && !runIsProd) {",
											"  throw Error(\"Running in prod is prohibited!\");",
											"}",
											"",
											"console.log(\"================================= Creating order on \" + pm.environment.get(\"MFC_TOM_CODE_3\") + \" ==================================\");",
											"",
											"//generate order number in format YYYYMMDDHHmm",
											"var moment = require('moment');",
											"var orderId3 = moment().format(\"YYYYMMDDHHmm\");",
											"",
											"pm.collectionVariables.set(\"orderId3\", orderId3);",
											"",
											"//set fulfillment date-time and stage-by-date-time for Order",
											"var env = pm.environment.get(\"ENV\");",
											"",
											"var tomorrow = (Date.now() + 24*60*60*1000);",
											"var targetDate = new Date(tomorrow).toISOString().slice(0,-13) + pm.environment.get(\"ORDER_TIME\");;",
											"",
											"pm.collectionVariables.set(\"orderDateTime\", \"\\\"\" + targetDate + \"\\\"\");",
											"pm.collectionVariables.set(\"stageByDateTime\", targetDate);",
											"",
											"//service-window-start for retailers on Service Contracts, fulfillment-datetime on MFC Cutoff",
											"var env = pm.environment.get(\"ENV\");",
											"var dateTimeParam;",
											"dateTimeParam = (env.includes(\"winter\")) ? \"fulfillment-datetime\" : \"service-window-start\";",
											"pm.collectionVariables.set(\"orderContractParam\",dateTimeParam);",
											"",
											"//generate order line items, using found chilled and ambient products",
											"var lineItems = [];",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson3\")).products;",
											"products.forEach(prod => lineItems.push(lineItemJson(prod[\"product-id\"])));",
											"pm.collectionVariables.set(\"lineItems\",lineItems);",
											"",
											"console.info(\"Creating Order# \" + orderId3 + \" on \" + pm.environment.get('ENV') + \" \" + pm.environment.get(\"MFC_TOM_CODE_3\"));",
											"",
											"function lineItemJson(product) {",
											"    return JSON.stringify(",
											"        {",
											"            \"takeoff-item-ids\": [",
											"                product",
											"            ],",
											"            \"ecom-item-id\": product,",
											"            \"requested-quantity\": 1,",
											"            \"ecom-line-id\": \"1\"",
											"        })",
											"}",
											"",
											"//use spoke Id for Winter in body",
											"if(env.includes(\"winter\")) {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"SPOKE_ID_3\"));",
											"} else {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"MFC_TOM_CODE_3\"));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c81d11a8-1cfe-49c4-8a0c-555c3970d16d",
										"exec": [
											"var jsondata = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Expect response success: true\", function() {",
											"    pm.expect(jsondata.success).is.equal(true);",
											"})",
											"",
											"if (pm.response.code != 200) {",
											"    console.log(\"!!! ERROR in Order creation!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"",
											"    if (jsondata.message.includes(\"Unconfigured mfc-cutoff-lite\") || ",
											"        jsondata.message.includes(\"No suitable contract found\")) {",
											"        console.log (\"Check MFC CUTOFF/Service Contract time in Environment Variables ORDER_TIME\");",
											"    }",
											"    console.log(\"===============================================================================================\");",
											"}",
											"",
											"if(jsondata.success) {",
											"    console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId3\") + \" created successfully on \" + pm.environment.get(\"MFC_TOM_CODE_3\") + \" =======================\");",
											"    console.log(\"===============================================================================================\");",
											"}",
											"pm.collectionVariables.unset(\"orderContractParam\");",
											"pm.collectionVariables.unset(\"spoke\");",
											"pm.collectionVariables.unset(\"stageByDateTime\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "778e580e-358f-4b34-8e65-d51bd4c2d751",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ecom-status\": \"new\",\n    \"store-id\": \"{{MFC_TOM_CODE_3}}\",\n    \"{{orderContractParam}}\": {{orderDateTime}},\n    \"ecom-payment-status\": \"none\",\n    \"spoke-id\": \"{{spoke}}\",\n    \"stage-by-datetime\": {{orderDateTime}},\n    \"order-id\": \"{{orderId3}}\",\n    \"shipping-label\": [\n        \"System QA\",\n        \"Test Order\",\n        \"Takeoff\"\n    ],\n    \"line-items\": [{{lineItems}}],\n    \"service-type\": \"DELIVERY\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://co-{{ENV}}.tom.takeoff.com/order",
								"description": "Creates an order, using OMS endpoint.</br>\n\nThe orderId is built in **Pre-req** in the format and saved into collection variable **orderId**:\n\n    var orderId = \"SQ_\" + date + \"_1\";\n\nAn example: **SQ_210309_1**</br>\n\nThe products retrived from the **productJson** collection variable, that are founf in \"Get Ambient and Chilled Items\" request"
							},
							"response": []
						},
						{
							"name": "orderSplit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2af8ce43-8816-4f5b-b954-9a3cf2944ff8",
										"exec": [
											"if (pm.response.code != 200) {",
											"    var jsondata = pm.response.json();",
											"    console.info(\"!!! ERROR in Order split!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"}",
											"pm.test(\"Success\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    ",
											"    if(jsondata.success)",
											"    console.log(\"================================ \"+ jsonData.message + \" ================================\");",
											"    console.log(\"===============================================================================================\");",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"    console.log(\"================ Split process has started for order \" + pm.collectionVariables.get(\"orderId3\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE_3\") + \" ================\");",
											"    console.log(\"===============================================================================================\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de14bf2d-cbe9-4b69-97f0-01f9ec85392a",
										"exec": [
											"console.log(\"==================================== Splitting the order ===================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "05c41844-1884-45c5-8b6f-ee6199a88c16",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"url": "https://co-{{ENV}}.tom.takeoff.com/order/split/{{orderId3}}"
							},
							"response": []
						},
						{
							"name": "Get number of items from the order from Inv Snapshot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b02317c8-09f1-4961-b8a3-7b5089f4831f",
										"exec": [
											"var data = pm.response.json();",
											"var inventory = [];",
											"inventory = data.success;",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson3\")).products;",
											"",
											"console.log(\"========================= Calculating Products Quantity on \" + pm.environment.get(\"MFC_TOM_CODE_3\") + \" ==========================\");",
											"// console.log(products);",
											"products.forEach(prod => printProductQty(prod));",
											"",
											"function printProductQty(item) {",
											"    for( i = 0; i < inventory.length; i++) {",
											"            if(inventory[i][\"product-id\"] == item[\"product-id\"]  && inventory[i][\"address\"] == \"01K\") {",
											"                item[\"qty-total\"] = inventory[i][\"qty-total\"];",
											"                console.info(\"product-id: \" + item[\"product-id\"] + \", qty-total: \" + item[\"qty-total\"]);",
											"            }",
											"        }",
											"}",
											"console.log(\"===============================================================================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "d5c580dd-8f22-4896-8a7f-48b4616f034b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE_3}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot",
								"description": "The script in the **Tests** tab will print the quantity of the products from **productsJson** collection variable (Products that were found beforehand in the **Get Ambient and Chilled Products** request)"
							},
							"response": []
						},
						{
							"name": "Get most recent products adjustments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f70066e6-f362-45e5-8f7d-a15834db9b42",
										"exec": [
											"var n = 10; //specify number of minutes (look up data for last N minutes)",
											"pm.collectionVariables.set(\"n\", n);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*20*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9e00bacb-e60c-4c71-9e36-f9451c7ede48",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"",
											"//get all adjusted products",
											"var productsMap = new Map;",
											"",
											"operations.forEach(op => {",
											"    if(!productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"    }",
											"",
											"    let item = {};",
											"    item[\"address\"] = op.address;",
											"    item[\"qty-before\"] = op[\"quantity-before\"];",
											"    item[\"qty\"] = op.quantity;",
											"    if(op.comment != null) {",
											"        item[\"comment\"] = op.comment;",
											"    }",
											"    productsMap.get(op.product)[\"adjustments\"].push(item);",
											"});",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE_3\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE_3\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"",
											"    var prodArr = Array.from(productsMap.keys());",
											"    ",
											"    for (j = 0; j < prodArr.length; j++) {",
											"        var prod = prodArr[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;  ",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"    }",
											"",
											"    console.log(\"=================== All items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE_3\") + \" ====================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "269d7f29-87f5-4675-9e4f-8cda37524d08",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE_3}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/adjustments",
								"description": "Responce returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-request Script** tab:\n\n    var n = 240; //specify number of minutes (look up data for last N minutes)\n\nThe result is printed in the console in the format:</br>\n    \n    {\"product\":\"00077901008589\",\"address\":\"01K\",\"comment\":\"PO=2103091897737\",\"temperature-zone\":\"chilled\"}"
							},
							"response": []
						},
						{
							"name": "Cancel order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5815bbe8-abf7-4c94-bc4d-68766717ac52",
										"exec": [
											"setTimeout(function () { }, [1000]);",
											"",
											"var response = pm.response.json();",
											"",
											"if(pm.response.code == 200) {",
											"    console.log(\"order \" + response.id + \", status is \" + response.status);",
											"} else {",
											"    console.log (JSON.stringify(response));",
											"}",
											"",
											"pm.test(\"Order status is cancelled\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.status).to.eql(\"cancelled\");",
											"});",
											"",
											"if (response.status == \"cancelled\") {",
											" console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId3\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE_3\") + \" has been cancelled =======================\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7b03ef41-2caf-43fb-8e4b-4a044bcc67a7",
										"exec": [
											"console.log(\"================================= Cancelling an order ==================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "7a3db92f-3298-4c27-a32a-9b724547a369",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}"
									}
								],
								"url": {
									"raw": "https://api-{{ENV}}.tom.takeoff.com/api/order?order-id={{orderId3}}&user-id=JqnNzDX3nDRZXlu9xnTlJuA6PqX2",
									"protocol": "https",
									"host": [
										"api-{{ENV}}",
										"tom",
										"takeoff",
										"com"
									],
									"path": [
										"api",
										"order"
									],
									"query": [
										{
											"key": "order-id",
											"value": "{{orderId3}}"
										},
										{
											"key": "user-id",
											"value": "JqnNzDX3nDRZXlu9xnTlJuA6PqX2"
										}
									]
								},
								"description": "Request cancels the order, created in CreateOrder Request."
							},
							"response": []
						},
						{
							"name": "Check specific item adjustments in last N minutes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30e78af8-6327-4580-84f9-1aee4dc3f838",
										"exec": [
											"var n = 20; //specify number of minutes (look up data for last N minutes)",
											"",
											"//specify products to look for adjustments",
											"var products = [\"5010029220049\"];",
											"",
											"pm.collectionVariables.set(\"n\", n);",
											"pm.collectionVariables.set(\"products\", products);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "723c3e43-1010-4b16-95f3-866947958bda",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"var products = pm.collectionVariables.get(\"products\"); // products to look for adjustments",
											"var productsMap = new Map();",
											"",
											"products.forEach(prod => productsMap.set(prod, {\"message\":\"Adjustments are not found for current product\"}));",
											"",
											"operations.forEach(op => {",
											"    if(productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"",
											"        let item = {};",
											"        item[\"address\"] = op.address;",
											"        item[\"qty-before\"] = op[\"quantity-before\"];",
											"        item[\"qty\"] = op.quantity;",
											"        if(op.comment != null) {",
											"            item[\"comment\"] = op.comment;",
											"        }",
											"        productsMap.get(op.product)[\"adjustments\"].push(item);",
											"    }",
											"})",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE_3\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE_3\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"    ",
											"    for (j = 0; j < products.length; j++) {",
											"        var prod = products[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod && productsMap.get(prod).hasOwnProperty(\"adjustments\")) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(products);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"",
											"    }",
											"",
											"    console.log(\"================= Specific items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE_3\") + \" ==================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c7656249-2c31-4fb3-86cd-fc59789e8b9e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE_3}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/adjustments",
								"description": "Response returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-request Script** tab:\n\n    var n = 5; //specify number of minutes (look up data for last N minutes)\n\nChange the product to look for in array: \n\n    //specify products to look for adjustments\n    var products = [\"123\"];\n    pm.collectionVariables.set(\"products\", products);\n\nThe result is printed in the console in the format:</br>\n    \n    00000000091688, chilled: {\"address\":\"01K\",\"qty-before\":8,\"qty\":-1,\"comment\":\"ORDER=29571874;\",\"qty-now\":7}"
							},
							"response": []
						},
						{
							"name": "IMS - ramp state tote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96d09605-0c6d-4734-b491-938bb8c39cce",
										"exec": [
											"var data = pm.response.json();",
											"",
											"var order_id = pm.environment.get(\"LAST_ORDER_ID\");",
											"ramp_order_id = \"z-\" + order_id",
											"var order = data.success.orders[order_id]",
											"if (order) {",
											"    pm.collectionVariables.set(\"tote_id\", order[0]);",
											"} else {",
											"    console.log(pm.environment.get(\"LAST_ORDER_ID\") + \" has no totes on ramp\")",
											"    pm.collectionVariables.set(\"tote_id\", \"\");",
											"}",
											"console.log(pm.collectionVariables.get(\"tote_id\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "1bfdfd33-07e7-497a-920f-80763a468aa7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"args\": [\"{{MFC_TOM_CODE_3}}\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/ramp-state"
							},
							"response": []
						},
						{
							"name": "clear ramp",
							"_postman_id": "c547e8e8-09fb-4917-aba5-8f987fd96ed4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE_3}}\", \"\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/free-up-channel"
							},
							"response": []
						}
					],
					"_postman_id": "6a406efc-3cfb-4601-a55e-2078b8e68113",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "0fe2595e-c2c9-4f47-9b98-b08eec0a1aa9"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "1eb18228-cc7f-4a35-910e-8c1397d663ef"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MFC 4",
					"item": [
						{
							"name": "Get Ambient and Chilled Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47c9dd10-b510-42ce-821b-0221249b35f8",
										"exec": [
											"//number of chilled products to be found (change the number if you need more)",
											"var c = 1;",
											"//number of ambient products to be found (change the number if you need more)",
											"var a = 2;",
											"",
											"var osrProducts = []; //all products from the selves-snapshot that match \"address=01K\"",
											"var qty = 5;",
											"var chilledItems = [];",
											"var ambientItems = [];",
											"var products = []; //result array to store all found products",
											"",
											"console.log(\"====================== Pulling Chilled and Ambient Products for \" + pm.environment.get(\"MFC_TOM_CODE_4\") + \" ======================\");",
											"",
											"// clear any previously saved data",
											"pm.collectionVariables.unset('productsJson3');",
											"",
											"var data = pm.response.json();",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE_4\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getOsrProducts() {",
											"    data.success.forEach(shelf => {",
											"        if (shelf.address == \"01K\" && shelf[\"qty-total\"] >= qty) {",
											"        osrProducts.push(shelf[\"product-id\"]);",
											"     }",
											"    })",
											"}",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    getOsrProducts();",
											"",
											"    for (i = 0; i < osrProducts.length; ) {",
											"    ",
											"        if (i + 10 <= osrProducts.length) {",
											"        var prodArr = osrProducts.slice(i, i+10);",
											"",
											"        } else {",
											"            var prodArr = osrProducts.slice(i, osrProducts.length - 1);",
											"        }",
											"        ",
											"        //get Fulfillment articles",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"",
											"        //find ambient and chilled items and save to array",
											"        for (j = 0; j < prodArr.length; j++) {",
											"            var prod = prodArr[j];",
											"            ",
											"            if(ffResult[prod].value!= null) {",
											"                let temp = ffResult[prod].value[\"temperature-zone\"];",
											"                if(temp == \"chilled\" && chilledItems.length < c) {",
											"                    chilledItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"chilled\";",
											"                    ",
											"                    products.push(item);",
											"",
											"                } else if(temp == \"ambient\" && ambientItems.length < a) {",
											"                    ambientItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"ambient\";",
											"",
											"                    products.push(item);",
											"                    ",
											"                } else if(chilledItems.length == c && ambientItems.length == a) {",
											"                    break;",
											"                }",
											"            }    ",
											"        }",
											"",
											"        if(chilledItems.length == c && ambientItems.length == a) {",
											"            break;",
											"        }",
											"        i+=10;    ",
											"    }",
											"",
											"    // saving found products to json",
											"    var json = {};",
											"    json[\"products\"] = products; ",
											"    pm.collectionVariables.set('productsJson3', JSON.stringify(json));",
											"",
											"    console.log(\"=================================== \" + products.length + \" products found \" + pm.environment.get(\"MFC_TOM_CODE_4\") + \" ===================================\");",
											"",
											"    products.forEach(prod => console.log(prod));",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "a007f75a-1330-42a2-8315-dfae701887d7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE_3}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot",
								"description": "Response return the items stored on OSR (01K) shelves. The script in the **Tests** will then call the getFulfillmentArticle request to find the specified number of ambient and chilled items. </br>\nTo change the number of chilled and/or ambient items, go to Tests tab and change the var:\n\n    var c = 2; //number of chilled items\n    var a = 2; //number of ambient products\n\nThe resulted json array will be written in collection variable **productsJson**, to be later retrieved. </br>\n\n**Found Ambient and Chilled products are printed in console**\n____________________________________________"
							},
							"response": []
						},
						{
							"name": "CreateOrder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "276377aa-bb4c-4eff-98ca-9e9de26db660",
										"exec": [
											"// env prod check",
											"var envIsProd = !(pm.environment.name.toLowerCase().indexOf(\"prod\") === -1);",
											"var runIsProd = pm.globals.get(\"RUN_IN_PROD\") === 'true';",
											"console.log(\"Running in env '\" + pm.environment.name + \"' [\" + (envIsProd ? \"prod\" : \"staging\") + \"]\");",
											"console.log(\"Confirmation string RUN_IN_PROD=\" + runIsProd);",
											"if (envIsProd && !runIsProd) {",
											"  throw Error(\"Running in prod is prohibited!\");",
											"}",
											"",
											"console.log(\"================================= Creating order on \" + pm.environment.get(\"MFC_TOM_CODE_4\") + \" ==================================\");",
											"",
											"//generate order number in format YYYYMMDDHHmm",
											"var moment = require('moment');",
											"var orderId3 = moment().format(\"YYYYMMDDHHmm\");",
											"",
											"pm.collectionVariables.set(\"orderId3\", orderId3);",
											"",
											"//set fulfillment date-time and stage-by-date-time for Order",
											"var env = pm.environment.get(\"ENV\");",
											"",
											"var tomorrow = (Date.now() + 24*60*60*1000);",
											"var targetDate = new Date(tomorrow).toISOString().slice(0,-13) + pm.environment.get(\"ORDER_TIME\");;",
											"",
											"pm.collectionVariables.set(\"orderDateTime\", \"\\\"\" + targetDate + \"\\\"\");",
											"pm.collectionVariables.set(\"stageByDateTime\", targetDate);",
											"",
											"//service-window-start for retailers on Service Contracts, fulfillment-datetime on MFC Cutoff",
											"var env = pm.environment.get(\"ENV\");",
											"var dateTimeParam;",
											"dateTimeParam = (env.includes(\"winter\")) ? \"fulfillment-datetime\" : \"service-window-start\";",
											"pm.collectionVariables.set(\"orderContractParam\",dateTimeParam);",
											"",
											"//generate order line items, using found chilled and ambient products",
											"var lineItems = [];",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson3\")).products;",
											"products.forEach(prod => lineItems.push(lineItemJson(prod[\"product-id\"])));",
											"pm.collectionVariables.set(\"lineItems\",lineItems);",
											"",
											"console.info(\"Creating Order# \" + orderId3 + \" on \" + pm.environment.get('ENV') + \" \" + pm.environment.get(\"MFC_TOM_CODE_4\"));",
											"",
											"function lineItemJson(product) {",
											"    return JSON.stringify(",
											"        {",
											"            \"takeoff-item-ids\": [",
											"                product",
											"            ],",
											"            \"ecom-item-id\": product,",
											"            \"requested-quantity\": 1,",
											"            \"ecom-line-id\": \"1\"",
											"        })",
											"}",
											"",
											"//use spoke Id for Winter in body",
											"if(env.includes(\"winter\")) {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"SPOKE_ID_3\"));",
											"} else {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"MFC_TOM_CODE_4\"));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c81d11a8-1cfe-49c4-8a0c-555c3970d16d",
										"exec": [
											"var jsondata = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Expect response success: true\", function() {",
											"    pm.expect(jsondata.success).is.equal(true);",
											"})",
											"",
											"if (pm.response.code != 200) {",
											"    console.log(\"!!! ERROR in Order creation!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"",
											"    if (jsondata.message.includes(\"Unconfigured mfc-cutoff-lite\") || ",
											"        jsondata.message.includes(\"No suitable contract found\")) {",
											"        console.log (\"Check MFC CUTOFF/Service Contract time in Environment Variables ORDER_TIME\");",
											"    }",
											"    console.log(\"===============================================================================================\");",
											"}",
											"",
											"if(jsondata.success) {",
											"    console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId3\") + \" created successfully on \" + pm.environment.get(\"MFC_TOM_CODE_4\") + \" =======================\");",
											"    console.log(\"===============================================================================================\");",
											"}",
											"pm.collectionVariables.unset(\"orderContractParam\");",
											"pm.collectionVariables.unset(\"spoke\");",
											"pm.collectionVariables.unset(\"stageByDateTime\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "b9e1b340-8da6-4502-b038-c9e71f3076f0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ecom-status\": \"new\",\n    \"store-id\": \"{{MFC_TOM_CODE_3}}\",\n    \"{{orderContractParam}}\": {{orderDateTime}},\n    \"ecom-payment-status\": \"none\",\n    \"spoke-id\": \"{{spoke}}\",\n    \"stage-by-datetime\": {{orderDateTime}},\n    \"order-id\": \"{{orderId3}}\",\n    \"shipping-label\": [\n        \"System QA\",\n        \"Test Order\",\n        \"Takeoff\"\n    ],\n    \"line-items\": [{{lineItems}}],\n    \"service-type\": \"DELIVERY\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://co-{{ENV}}.tom.takeoff.com/order",
								"description": "Creates an order, using OMS endpoint.</br>\n\nThe orderId is built in **Pre-req** in the format and saved into collection variable **orderId**:\n\n    var orderId = \"SQ_\" + date + \"_1\";\n\nAn example: **SQ_210309_1**</br>\n\nThe products retrived from the **productJson** collection variable, that are founf in \"Get Ambient and Chilled Items\" request"
							},
							"response": []
						},
						{
							"name": "orderSplit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2af8ce43-8816-4f5b-b954-9a3cf2944ff8",
										"exec": [
											"if (pm.response.code != 200) {",
											"    var jsondata = pm.response.json();",
											"    console.info(\"!!! ERROR in Order split!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"}",
											"pm.test(\"Success\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    ",
											"    if(jsondata.success)",
											"    console.log(\"================================ \"+ jsonData.message + \" ================================\");",
											"    console.log(\"===============================================================================================\");",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"    console.log(\"================ Split process has started for order \" + pm.collectionVariables.get(\"orderId3\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE_4\") + \" ================\");",
											"    console.log(\"===============================================================================================\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de14bf2d-cbe9-4b69-97f0-01f9ec85392a",
										"exec": [
											"console.log(\"==================================== Splitting the order ===================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "341442b1-8565-4cf9-964c-54b4be655360",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"url": "https://co-{{ENV}}.tom.takeoff.com/order/split/{{orderId3}}"
							},
							"response": []
						},
						{
							"name": "Get number of items from the order from Inv Snapshot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b02317c8-09f1-4961-b8a3-7b5089f4831f",
										"exec": [
											"var data = pm.response.json();",
											"var inventory = [];",
											"inventory = data.success;",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson3\")).products;",
											"",
											"console.log(\"========================= Calculating Products Quantity on \" + pm.environment.get(\"MFC_TOM_CODE_3\") + \" ==========================\");",
											"// console.log(products);",
											"products.forEach(prod => printProductQty(prod));",
											"",
											"function printProductQty(item) {",
											"    for( i = 0; i < inventory.length; i++) {",
											"            if(inventory[i][\"product-id\"] == item[\"product-id\"]  && inventory[i][\"address\"] == \"01K\") {",
											"                item[\"qty-total\"] = inventory[i][\"qty-total\"];",
											"                console.info(\"product-id: \" + item[\"product-id\"] + \", qty-total: \" + item[\"qty-total\"]);",
											"            }",
											"        }",
											"}",
											"console.log(\"===============================================================================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "9268dcfa-dc6c-4cab-8fdd-886517208f4f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE_3}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot",
								"description": "The script in the **Tests** tab will print the quantity of the products from **productsJson** collection variable (Products that were found beforehand in the **Get Ambient and Chilled Products** request)"
							},
							"response": []
						},
						{
							"name": "Get most recent products adjustments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f70066e6-f362-45e5-8f7d-a15834db9b42",
										"exec": [
											"var n = 10; //specify number of minutes (look up data for last N minutes)",
											"pm.collectionVariables.set(\"n\", n);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*20*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9e00bacb-e60c-4c71-9e36-f9451c7ede48",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"",
											"//get all adjusted products",
											"var productsMap = new Map;",
											"",
											"operations.forEach(op => {",
											"    if(!productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"    }",
											"",
											"    let item = {};",
											"    item[\"address\"] = op.address;",
											"    item[\"qty-before\"] = op[\"quantity-before\"];",
											"    item[\"qty\"] = op.quantity;",
											"    if(op.comment != null) {",
											"        item[\"comment\"] = op.comment;",
											"    }",
											"    productsMap.get(op.product)[\"adjustments\"].push(item);",
											"});",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE_4\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE_4\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"",
											"    var prodArr = Array.from(productsMap.keys());",
											"    ",
											"    for (j = 0; j < prodArr.length; j++) {",
											"        var prod = prodArr[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;  ",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"    }",
											"",
											"    console.log(\"=================== All items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE_4\") + \" ====================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "320e4f0e-76e2-426c-9d0a-ea46a2df3424",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE_3}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/adjustments",
								"description": "Responce returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-request Script** tab:\n\n    var n = 240; //specify number of minutes (look up data for last N minutes)\n\nThe result is printed in the console in the format:</br>\n    \n    {\"product\":\"00077901008589\",\"address\":\"01K\",\"comment\":\"PO=2103091897737\",\"temperature-zone\":\"chilled\"}"
							},
							"response": []
						},
						{
							"name": "Cancel order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5815bbe8-abf7-4c94-bc4d-68766717ac52",
										"exec": [
											"setTimeout(function () { }, [1000]);",
											"",
											"var response = pm.response.json();",
											"",
											"if(pm.response.code == 200) {",
											"    console.log(\"order \" + response.id + \", status is \" + response.status);",
											"} else {",
											"    console.log (JSON.stringify(response));",
											"}",
											"",
											"pm.test(\"Order status is cancelled\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.status).to.eql(\"cancelled\");",
											"});",
											"",
											"if (response.status == \"cancelled\") {",
											" console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId3\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE_4\") + \" has been cancelled =======================\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7b03ef41-2caf-43fb-8e4b-4a044bcc67a7",
										"exec": [
											"console.log(\"================================= Cancelling an order ==================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "ea000f33-7689-4bfe-a03f-55c4087ed0a4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}"
									}
								],
								"url": {
									"raw": "https://api-{{ENV}}.tom.takeoff.com/api/order?order-id={{orderId3}}&user-id=JqnNzDX3nDRZXlu9xnTlJuA6PqX2",
									"protocol": "https",
									"host": [
										"api-{{ENV}}",
										"tom",
										"takeoff",
										"com"
									],
									"path": [
										"api",
										"order"
									],
									"query": [
										{
											"key": "order-id",
											"value": "{{orderId3}}"
										},
										{
											"key": "user-id",
											"value": "JqnNzDX3nDRZXlu9xnTlJuA6PqX2"
										}
									]
								},
								"description": "Request cancels the order, created in CreateOrder Request."
							},
							"response": []
						},
						{
							"name": "Check specific item adjustments in last N minutes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30e78af8-6327-4580-84f9-1aee4dc3f838",
										"exec": [
											"var n = 20; //specify number of minutes (look up data for last N minutes)",
											"",
											"//specify products to look for adjustments",
											"var products = [\"5010029220049\"];",
											"",
											"pm.collectionVariables.set(\"n\", n);",
											"pm.collectionVariables.set(\"products\", products);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "723c3e43-1010-4b16-95f3-866947958bda",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"var products = pm.collectionVariables.get(\"products\"); // products to look for adjustments",
											"var productsMap = new Map();",
											"",
											"products.forEach(prod => productsMap.set(prod, {\"message\":\"Adjustments are not found for current product\"}));",
											"",
											"operations.forEach(op => {",
											"    if(productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"",
											"        let item = {};",
											"        item[\"address\"] = op.address;",
											"        item[\"qty-before\"] = op[\"quantity-before\"];",
											"        item[\"qty\"] = op.quantity;",
											"        if(op.comment != null) {",
											"            item[\"comment\"] = op.comment;",
											"        }",
											"        productsMap.get(op.product)[\"adjustments\"].push(item);",
											"    }",
											"})",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE_4\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.tom.takeoff.com/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE_4\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"    ",
											"    for (j = 0; j < products.length; j++) {",
											"        var prod = products[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod && productsMap.get(prod).hasOwnProperty(\"adjustments\")) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(products);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"",
											"    }",
											"",
											"    console.log(\"================= Specific items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE_4\") + \" ==================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "29996d64-1e5d-427c-af92-d54d4c3964b5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE_3}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/adjustments",
								"description": "Response returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-request Script** tab:\n\n    var n = 5; //specify number of minutes (look up data for last N minutes)\n\nChange the product to look for in array: \n\n    //specify products to look for adjustments\n    var products = [\"123\"];\n    pm.collectionVariables.set(\"products\", products);\n\nThe result is printed in the console in the format:</br>\n    \n    00000000091688, chilled: {\"address\":\"01K\",\"qty-before\":8,\"qty\":-1,\"comment\":\"ORDER=29571874;\",\"qty-now\":7}"
							},
							"response": []
						},
						{
							"name": "IMS - ramp state tote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96d09605-0c6d-4734-b491-938bb8c39cce",
										"exec": [
											"var data = pm.response.json();",
											"",
											"var order_id = pm.environment.get(\"LAST_ORDER_ID\");",
											"ramp_order_id = \"z-\" + order_id",
											"var order = data.success.orders[order_id]",
											"if (order) {",
											"    pm.collectionVariables.set(\"tote_id\", order[0]);",
											"} else {",
											"    console.log(pm.environment.get(\"LAST_ORDER_ID\") + \" has no totes on ramp\")",
											"    pm.collectionVariables.set(\"tote_id\", \"\");",
											"}",
											"console.log(pm.collectionVariables.get(\"tote_id\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "76252b21-9bea-410d-be51-17312da634f1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"args\": [\"{{MFC_TOM_CODE_4}}\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/ramp-state"
							},
							"response": []
						},
						{
							"name": "clear ramp",
							"_postman_id": "86333aef-8755-4981-9265-e1ca5c40db55",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE_4}}\", \"\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.tom.takeoff.com/api/v1/command-server/message/free-up-channel"
							},
							"response": []
						}
					],
					"_postman_id": "6040694b-196a-4566-99cb-4821a0839547",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "0fe2595e-c2c9-4f47-9b98-b08eec0a1aa9"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "1eb18228-cc7f-4a35-910e-8c1397d663ef"
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"_postman_id": "1a1f753d-67a3-4976-a28f-e6aebff8f2d9",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "c56325a0-2c08-4ff6-943d-ea4bad31f12b"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "d41c634d-9596-4a5a-8695-67e074344461"
					}
				}
			]
		},
		{
			"name": "Сloudflare only, staging evs",
			"item": [
				{
					"name": " MFC 1",
					"item": [
						{
							"name": "Get Ambient and Chilled Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf27e745-93b7-4fc3-aa33-fe28cf9ffae7",
										"exec": [
											"//number of chilled products to be found (change the number if you need more)",
											"var c = 1;",
											"//number of ambient products to be found (change the number if you need more)",
											"var a = 2;",
											"",
											"var osrProducts = []; //all products from the selves-snapshot that match \"address=01K\"",
											"var qty = 30;",
											"var chilledItems = [];",
											"var ambientItems = [];",
											"var products = []; //result array to store all found products",
											"",
											"console.log(\"====================== Pulling Chilled and Ambient Products for \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ======================\");",
											"",
											"// clear any previously saved data",
											"pm.collectionVariables.unset('productsJson');",
											"",
											"var data = pm.response.json();",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getOsrProducts() {",
											"    data.success.forEach(shelf => {",
											"        if (shelf.address == \"01K\" && shelf[\"qty-total\"] >= qty) {",
											"        osrProducts.push(shelf[\"product-id\"]);",
											"     }",
											"    })",
											"}",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    getOsrProducts();",
											"",
											"    for (i = 0; i < osrProducts.length; ) {",
											"    ",
											"        if (i + 10 <= osrProducts.length) {",
											"        var prodArr = osrProducts.slice(i, i+30);",
											"",
											"        } else {",
											"            var prodArr = osrProducts.slice(i, osrProducts.length - 1);",
											"        }",
											"        ",
											"        //get Fulfillment articles",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"",
											"        //find ambient and chilled items and save to array",
											"        for (j = 0; j < prodArr.length; j++) {",
											"            var prod = prodArr[j];",
											"            ",
											"            if(ffResult[prod].value!= null) {",
											"                let temp = ffResult[prod].value[\"temperature-zone\"];",
											"                if(temp == \"chilled\" && chilledItems.length < c) {",
											"                    chilledItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"chilled\";",
											"                    ",
											"                    products.push(item);",
											"",
											"                } else if(temp == \"ambient\" && ambientItems.length < a) {",
											"                    ambientItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"ambient\";",
											"",
											"                    products.push(item);",
											"                    ",
											"                } else if(chilledItems.length == c && ambientItems.length == a) {",
											"                    break;",
											"                }",
											"            }    ",
											"        }",
											"",
											"        if(chilledItems.length == c && ambientItems.length == a) {",
											"            break;",
											"        }",
											"        i+=10;    ",
											"    }",
											"",
											"    // saving found products to json",
											"    var json = {};",
											"    json[\"products\"] = products; ",
											"    pm.collectionVariables.set('productsJson', JSON.stringify(json));",
											"",
											"    console.log(\"=================================== \" + products.length + \" products found \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ===================================\");",
											"",
											"    products.forEach(prod => console.log(prod));",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"})();",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "564c2b01-a21c-4364-bbe5-23803831231c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"args\": [\r\n    \"{{MFC_TOM_CODE}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/shelves-snapshot",
								"description": "Response return the items stored on OSR (01K) shelves. The script in the **Tests** will then call the getFulfillmentArticle request to find the specified number of ambient and chilled items. </br>\nTo change the number of chilled and/or ambient items, go to Tests tab and change the var:\n\n    var c = 2; //number of chilled items\n    var a = 2; //number of ambient products\n\nThe resulted json array will be written in collection variable **productsJson**, to be later retrieved. </br>\n\n**Found Ambient and Chilled products are printed in console**"
							},
							"response": []
						},
						{
							"name": "CreateOrder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19c8dc53-ee89-4076-a4b2-cb9630a47f90",
										"exec": [
											"// env prod check",
											"var envIsProd = !(pm.environment.name.toLowerCase().indexOf(\"prod\") === -1);",
											"var runIsProd = pm.globals.get(\"RUN_IN_PROD\") === 'true';",
											"console.log(\"Running in env '\" + pm.environment.name + \"' [\" + (envIsProd ? \"prod\" : \"staging\") + \"]\");",
											"console.log(\"Confirmation string RUN_IN_PROD=\" + runIsProd);",
											"if (envIsProd && !runIsProd) {",
											"  throw Error(\"Running in prod is prohibited!\");",
											"}",
											"",
											"console.log(\"================================= Creating order on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ==================================\");",
											"",
											"//generate order number in format YYYYMMDDHHmm",
											"var moment = require('moment');",
											"var orderId = moment().format(\"YYYYMMDDHHmm\");",
											"",
											"pm.collectionVariables.set(\"orderId\", orderId);",
											"",
											"//set tomorrow's date for Order (date now + hr*min*s*ms)",
											"var tomorrow = (Date.now() + 24*60*60*1000);",
											"var targetDate = new Date(tomorrow).toISOString().slice(0,-13) + pm.environment.get(\"ORDER_TIME\");",
											"pm.collectionVariables.set(\"orderDateTime\", targetDate);",
											"",
											"//service-window-start for retailers on Service Contracts, fulfillment-datetime on MFC Cutoff",
											"var env = pm.environment.get(\"ENV\");",
											"var dateTimeParam;",
											"dateTimeParam = (env.includes(\"winter\")) ? \"fulfillment-datetime\" : \"service-window-start\";",
											"pm.collectionVariables.set(\"orderContractParam\",dateTimeParam);",
											"",
											"//generate order line items, using found chilled and ambient products",
											"var lineItems = [];",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson\")).products;",
											"products.forEach(prod => lineItems.push(lineItemJson(prod[\"product-id\"])));",
											"pm.collectionVariables.set(\"lineItems\",lineItems);",
											"",
											"console.info(\"Creating Order# \" + orderId + \" on \" + pm.environment.get('ENV') + \" \" + pm.environment.get(\"MFC_TOM_CODE\"));",
											"",
											"function lineItemJson(product) {",
											"    return JSON.stringify(",
											"        {",
											"            \"takeoff-item-ids\": [",
											"                product",
											"            ],",
											"            \"ecom-item-id\": product,",
											"            \"requested-quantity\": 1,",
											"            \"ecom-line-id\": \"1\"",
											"        })",
											"}",
											"if(env.includes(\"winter\")) {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"SPOKE_ID_1\"));",
											"} else {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"MFC_TOM_CODE\"));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7e17c311-4526-447b-aa1c-73b2d1a43aee",
										"exec": [
											"var jsondata = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Expect response success: true\", function() {",
											"    pm.expect(jsondata.success).is.equal(true);",
											"})",
											"",
											"if (pm.response.code != 200) {",
											"    console.log(\"!!! ERROR in Order creation!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"",
											"    if (jsondata.message.includes(\"Unconfigured mfc-cutoff-lite\") || ",
											"        jsondata.message.includes(\"No suitable contract found\")) {",
											"        console.log (\"Check MFC CUTOFF/Service Contract time in Environment Variables ORDER_TIME\");",
											"    }",
											"    console.log(\"===============================================================================================\");",
											"}",
											"",
											"if(jsondata.success) {",
											"    console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId\") + \" created successfully on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" =======================\");",
											"    console.log(\"===============================================================================================\");",
											"}",
											"pm.collectionVariables.unset(\"orderContractParam\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "9ca8a020-d2f1-4eb0-9a52-32ef19a1977d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ecom-status\": \"new\",\n    \"store-id\": \"{{MFC_TOM_CODE}}\",\n    \"{{orderContractParam}}\": \"{{orderDateTime}}\",\n    \"ecom-payment-status\": \"none\",\n    \"spoke-id\": \"{{spoke}}\",\n    \"stage-by-datetime\": \"{{orderDateTime}}\",\n    \"order-id\": \"{{orderId}}\",\n    \"shipping-label\": [\n        \"System QA\",\n        \"Test Order\",\n        \"Takeoff\"\n    ],\n    \"line-items\": [{{lineItems}}],\n    \"service-type\": \"DELIVERY\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://co-{{ENV}}.takeofftech.io/order",
								"description": "Creates an order, using OMS endpoint.</br>\n\nThe orderId is built in **Pre-req** in the format and saved into collection variable **orderId**:\n\n    var orderId = \"SQ_\" + date + \"_1\";\n\nAn example: **SQ_210309_1**</br>\n\nThe products retrived from the **productJson** collection variable, that are founf in \"Get Ambient and Chilled Items\" request"
							},
							"response": []
						},
						{
							"name": "orderSplit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecc4f508-7bcf-4a32-9032-51c08a7e8f5e",
										"exec": [
											"if (pm.response.code != 200) {",
											"    var jsondata = pm.response.json();",
											"    console.info(\"!!! ERROR in Order split!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"}",
											"pm.test(\"Success\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    ",
											"    if(jsondata.success)",
											"    console.log(\"================================ \"+ jsonData.message + \" ================================\");",
											"    console.log(\"===============================================================================================\");",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"    console.log(\"================ Split process has started for order \" + pm.collectionVariables.get(\"orderId\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ================\");",
											"    console.log(\"===============================================================================================\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0592e60a-26c2-4980-9f90-7a39cec474ed",
										"exec": [
											"console.log(\"==================================== Splitting the order ===================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c0ddf796-1682-4610-bc0b-1838c9644c1b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"url": "https://co-{{ENV}}.takeofftech.io/order/split/{{orderId}}"
							},
							"response": []
						},
						{
							"name": "Get number of items from the order from Inv Snapshot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "badda9ed-79a8-478b-9b5c-b7f6f48b9acc",
										"exec": [
											"var data = pm.response.json();",
											"var inventory = [];",
											"inventory = data.success;",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson\")).products;",
											"",
											"console.log(\"========================= Calculating Products Quantity on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ==========================\");",
											"// console.log(products);",
											"products.forEach(prod => printProductQty(prod));",
											"",
											"function printProductQty(item) {",
											"    for( i = 0; i < inventory.length; i++) {",
											"            if(inventory[i][\"product-id\"] == item[\"product-id\"]  && inventory[i][\"address\"] == \"01K\") {",
											"                item[\"qty-total\"] = inventory[i][\"qty-total\"];",
											"                console.info(\"product-id: \" + item[\"product-id\"] + \", qty-total: \" + item[\"qty-total\"]);",
											"            }",
											"        }",
											"}",
											"console.log(\"===============================================================================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "992549b6-6e77-484e-a161-fc5131433b3e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/shelves-snapshot",
								"description": "The script in the **Tests** tab will print the quantity of the products from **productsJson** collection variable (Products that were found beforehand in the Get Ambient and Chilled Products request)"
							},
							"response": []
						},
						{
							"name": "Get most recent products adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "312b38c7-79b9-45cd-9d45-30641aeb9b50",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"",
											"//get all adjusted products",
											"var productsMap = new Map;",
											"",
											"operations.forEach(op => {",
											"    if(!productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"    }",
											"",
											"    let item = {};",
											"    item[\"address\"] = op.address;",
											"    item[\"qty-before\"] = op[\"quantity-before\"];",
											"    item[\"qty\"] = op.quantity;",
											"    if(op.comment != null) {",
											"        item[\"comment\"] = op.comment;",
											"    }",
											"    productsMap.get(op.product)[\"adjustments\"].push(item);",
											"});",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(prods) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(prods, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"",
											"    var prodArr = Array.from(productsMap.keys());",
											"    ",
											"    for (j = 0; j < prodArr.length; j++) {",
											"        var prod = prodArr[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;  ",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"    }",
											"",
											"    console.log(\"=================== All items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ====================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ebe73c6-bc5b-491c-99c6-7a882ffa772e",
										"exec": [
											"var n = 240; //specify number of minutes (look up data for last N minutes)",
											"pm.collectionVariables.set(\"n\", n);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "08c6ce3b-55e6-4647-8bb1-c6886f8f5474",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/adjustments",
								"description": "Responce returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-req** tab:\n\n    var n = 240; //specify number of minutes (look up data for last N minutes)\n\nThe result is printed in the console in the format:</br>\n    \n    {\"product\":\"00077901008589\",\"address\":\"01K\",\"comment\":\"PO=2103091897737\",\"temperature-zone\":\"chilled\"}"
							},
							"response": []
						},
						{
							"name": "Cancel order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f6248c4-9eeb-4f2e-9a9d-7ed64570283c",
										"exec": [
											"setTimeout(function () { }, [1000]);",
											"",
											"var response = pm.response.json();",
											"",
											"console.log(\"order \" + response.id + \", status is \" + response.status);",
											"",
											"pm.test(\"Order status is cancelled\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.status).to.eql(\"cancelled\");",
											"});",
											"",
											"if (response.status == \"cancelled\") {",
											" console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" has been cancelled =======================\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eeb46db4-321b-45d1-9659-952a66fd1a91",
										"exec": [
											"console.log(\"================================= Cancelling an order ==================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f460b24e-1e2e-46b8-b0be-1587cb97b661",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}"
									}
								],
								"url": {
									"raw": "https://api-{{ENV}}.takeofftech.io/api/order?order-id={{orderId}}&user-id=JqnNzDX3nDRZXlu9xnTlJuA6PqX2",
									"protocol": "https",
									"host": [
										"api-{{ENV}}",
										"takeofftech",
										"io"
									],
									"path": [
										"api",
										"order"
									],
									"query": [
										{
											"key": "order-id",
											"value": "{{orderId}}"
										},
										{
											"key": "user-id",
											"value": "JqnNzDX3nDRZXlu9xnTlJuA6PqX2"
										}
									]
								},
								"description": "Request cancels the order, created in CreateOrder Request."
							},
							"response": []
						},
						{
							"name": "Check specific item adjustments in last N minutes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30e78af8-6327-4580-84f9-1aee4dc3f838",
										"exec": [
											"var n = 240; //specify number of minutes (look up data for last N minutes)",
											"",
											"//specify products to look for adjustments",
											"var products = [\"00000000040273\", \"00041190465156\"];",
											"",
											"pm.collectionVariables.set(\"n\", n);",
											"pm.collectionVariables.set(\"products\", products);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "723c3e43-1010-4b16-95f3-866947958bda",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"var products = pm.collectionVariables.get(\"products\"); // products to look for adjustments",
											"var productsMap = new Map();",
											"",
											"products.forEach(prod => productsMap.set(prod, {\"message\":\"Adjustments are not found for current product\"}));",
											"",
											"operations.forEach(op => {",
											"    if(productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"",
											"        let item = {};",
											"        item[\"address\"] = op.address;",
											"        item[\"qty-before\"] = op[\"quantity-before\"];",
											"        item[\"qty\"] = op.quantity;",
											"        if(op.comment != null) {",
											"            item[\"comment\"] = op.comment;",
											"        }",
											"        productsMap.get(op.product)[\"adjustments\"].push(item);",
											"    }",
											"})",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"    ",
											"    for (j = 0; j < products.length; j++) {",
											"        var prod = products[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod && productsMap.get(prod).hasOwnProperty(\"adjustments\")) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(products);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"",
											"    }",
											"",
											"    console.log(\"=================== All items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ====================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "2e5883c4-3c51-4893-989c-3763e8fa2425",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/adjustments",
								"description": "Response returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-req** tab:\n\n    var n = 5; //specify number of minutes (look up data for last N minutes)\n\nChange the product to look for in array: \n\n    //specify products to look for adjustments\n    var products = [\"123\"];\n    pm.collectionVariables.set(\"products\", products);\n\nThe result is printed in the console in the format:</br>\n    \n    00000000091688, chilled: {\"address\":\"01K\",\"qty-before\":8,\"qty\":-1,\"comment\":\"ORDER=29571874;\",\"qty-now\":7}"
							},
							"response": []
						}
					],
					"_postman_id": "711c55e7-e63d-48db-86fd-c0f5921f1bb4",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "49d78222-fc92-45d4-a485-04ad89ede8d2",
								"type": "text/javascript",
								"exec": [
									"if(pm.environment.has('NEW_ENV')){",
									"    var regex = /{.*/i",
									"    var uri = pm.request.url.host.join('.')",
									"    uri = uri.replace(regex,pm.environment.get('NEW_ENV'))",
									" pm.request.url.host = uri",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b34d7af3-3e7d-462f-850c-d3963664b528",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MFC 2",
					"item": [
						{
							"name": "Get Ambient and Chilled Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf27e745-93b7-4fc3-aa33-fe28cf9ffae7",
										"exec": [
											"//number of chilled products to be found (change the number if you need more)",
											"var c = 1;",
											"//number of ambient products to be found (change the number if you need more)",
											"var a = 2;",
											"",
											"var osrProducts = []; //all products from the selves-snapshot that match \"address=01K\"",
											"var qty = 30;",
											"var chilledItems = [];",
											"var ambientItems = [];",
											"var products = []; //result array to store all found products",
											"",
											"console.log(\"====================== Pulling Chilled and Ambient Products for \" + pm.environment.get(\"MFC_TOM_CODE2\") + \" ======================\");",
											"",
											"// clear any previously saved data",
											"pm.collectionVariables.unset('productsJson');",
											"",
											"var data = pm.response.json();",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE2\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getOsrProducts() {",
											"    data.success.forEach(shelf => {",
											"        if (shelf.address == \"01K\" && shelf[\"qty-total\"] >= qty) {",
											"        osrProducts.push(shelf[\"product-id\"]);",
											"     }",
											"    })",
											"}",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    getOsrProducts();",
											"",
											"    for (i = 0; i < osrProducts.length; ) {",
											"    ",
											"        if (i + 10 <= osrProducts.length) {",
											"        var prodArr = osrProducts.slice(i, i+30);",
											"",
											"        } else {",
											"            var prodArr = osrProducts.slice(i, osrProducts.length - 1);",
											"        }",
											"        ",
											"        //get Fulfillment articles",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"",
											"        //find ambient and chilled items and save to array",
											"        for (j = 0; j < prodArr.length; j++) {",
											"            var prod = prodArr[j];",
											"            ",
											"            if(ffResult[prod].value!= null) {",
											"                let temp = ffResult[prod].value[\"temperature-zone\"];",
											"                if(temp == \"chilled\" && chilledItems.length < c) {",
											"                    chilledItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"chilled\";",
											"                    ",
											"                    products.push(item);",
											"",
											"                } else if(temp == \"ambient\" && ambientItems.length < a) {",
											"                    ambientItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"ambient\";",
											"",
											"                    products.push(item);",
											"                    ",
											"                } else if(chilledItems.length == c && ambientItems.length == a) {",
											"                    break;",
											"                }",
											"            }    ",
											"        }",
											"",
											"        if(chilledItems.length == c && ambientItems.length == a) {",
											"            break;",
											"        }",
											"        i+=10;    ",
											"    }",
											"",
											"    // saving found products to json",
											"    var json = {};",
											"    json[\"products\"] = products; ",
											"    pm.collectionVariables.set('productsJson', JSON.stringify(json));",
											"",
											"    console.log(\"=================================== \" + products.length + \" products found \" + pm.environment.get(\"MFC_TOM_CODE2\") + \" ===================================\");",
											"",
											"    products.forEach(prod => console.log(prod));",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"})();",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "478d0491-27f9-4b0c-a953-37b1dd05e6a6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/shelves-snapshot",
								"description": "Response return the items stored on OSR (01K) shelves. The script in the **Tests** will then call the getFulfillmentArticle request to find the specified number of ambient and chilled items. </br>\nTo change the number of chilled and/or ambient items, go to Tests tab and change the var:\n\n    var c = 2; //number of chilled items\n    var a = 2; //number of ambient products\n\nThe resulted json array will be written in collection variable **productsJson**, to be later retrieved. </br>\n\n**Found Ambient and Chilled products are printed in console**"
							},
							"response": []
						},
						{
							"name": "CreateOrder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19c8dc53-ee89-4076-a4b2-cb9630a47f90",
										"exec": [
											"// env prod check",
											"var envIsProd = !(pm.environment.name.toLowerCase().indexOf(\"prod\") === -1);",
											"var runIsProd = pm.globals.get(\"RUN_IN_PROD\") === 'true';",
											"console.log(\"Running in env '\" + pm.environment.name + \"' [\" + (envIsProd ? \"prod\" : \"staging\") + \"]\");",
											"console.log(\"Confirmation string RUN_IN_PROD=\" + runIsProd);",
											"if (envIsProd && !runIsProd) {",
											"  throw Error(\"Running in prod is prohibited!\");",
											"}",
											"",
											"console.log(\"================================= Creating order on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ==================================\");",
											"",
											"//generate order number in format YYYYMMDDHHmm",
											"var moment = require('moment');",
											"var orderId = moment().format(\"YYYYMMDDHHmm\");",
											"",
											"pm.collectionVariables.set(\"orderId\", orderId);",
											"",
											"//set tomorrow's date for Order (date now + hr*min*s*ms)",
											"var tomorrow = (Date.now() + 24*60*60*1000);",
											"var targetDate = new Date(tomorrow).toISOString().slice(0,-13) + pm.environment.get(\"ORDER_TIME\");",
											"pm.collectionVariables.set(\"orderDateTime\", targetDate);",
											"",
											"//service-window-start for retailers on Service Contracts, fulfillment-datetime on MFC Cutoff",
											"var env = pm.environment.get(\"ENV\");",
											"var dateTimeParam;",
											"dateTimeParam = (env.includes(\"winter\")) ? \"fulfillment-datetime\" : \"service-window-start\";",
											"pm.collectionVariables.set(\"orderContractParam\",dateTimeParam);",
											"",
											"//generate order line items, using found chilled and ambient products",
											"var lineItems = [];",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson\")).products;",
											"products.forEach(prod => lineItems.push(lineItemJson(prod[\"product-id\"])));",
											"pm.collectionVariables.set(\"lineItems\",lineItems);",
											"",
											"console.info(\"Creating Order# \" + orderId + \" on \" + pm.environment.get('ENV') + \" \" + pm.environment.get(\"MFC_TOM_CODE\"));",
											"",
											"function lineItemJson(product) {",
											"    return JSON.stringify(",
											"        {",
											"            \"takeoff-item-ids\": [",
											"                product",
											"            ],",
											"            \"ecom-item-id\": product,",
											"            \"requested-quantity\": 1,",
											"            \"ecom-line-id\": \"1\"",
											"        })",
											"}",
											"if(env.includes(\"winter\")) {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"SPOKE_ID_1\"));",
											"} else {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"MFC_TOM_CODE\"));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7e17c311-4526-447b-aa1c-73b2d1a43aee",
										"exec": [
											"var jsondata = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Expect response success: true\", function() {",
											"    pm.expect(jsondata.success).is.equal(true);",
											"})",
											"",
											"if (pm.response.code != 200) {",
											"    console.log(\"!!! ERROR in Order creation!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"",
											"    if (jsondata.message.includes(\"Unconfigured mfc-cutoff-lite\") || ",
											"        jsondata.message.includes(\"No suitable contract found\")) {",
											"        console.log (\"Check MFC CUTOFF/Service Contract time in Environment Variables ORDER_TIME\");",
											"    }",
											"    console.log(\"===============================================================================================\");",
											"}",
											"",
											"if(jsondata.success) {",
											"    console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId\") + \" created successfully on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" =======================\");",
											"    console.log(\"===============================================================================================\");",
											"}",
											"pm.collectionVariables.unset(\"orderContractParam\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "7fcd4cdd-f733-4be1-9471-d574ea6fd06b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ecom-status\": \"new\",\n    \"store-id\": \"{{MFC_TOM_CODE}}\",\n    \"{{orderContractParam}}\": \"{{orderDateTime}}\",\n    \"ecom-payment-status\": \"none\",\n    \"spoke-id\": \"{{spoke}}\",\n    \"stage-by-datetime\": \"{{orderDateTime}}\",\n    \"order-id\": \"{{orderId}}\",\n    \"shipping-label\": [\n        \"System QA\",\n        \"Test Order\",\n        \"Takeoff\"\n    ],\n    \"line-items\": [{{lineItems}}],\n    \"service-type\": \"DELIVERY\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://co-{{ENV}}.takeofftech.io/order",
								"description": "Creates an order, using OMS endpoint.</br>\n\nThe orderId is built in **Pre-req** in the format and saved into collection variable **orderId**:\n\n    var orderId = \"SQ_\" + date + \"_1\";\n\nAn example: **SQ_210309_1**</br>\n\nThe products retrived from the **productJson** collection variable, that are founf in \"Get Ambient and Chilled Items\" request"
							},
							"response": []
						},
						{
							"name": "orderSplit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecc4f508-7bcf-4a32-9032-51c08a7e8f5e",
										"exec": [
											"if (pm.response.code != 200) {",
											"    var jsondata = pm.response.json();",
											"    console.info(\"!!! ERROR in Order split!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"}",
											"pm.test(\"Success\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    ",
											"    if(jsondata.success)",
											"    console.log(\"================================ \"+ jsonData.message + \" ================================\");",
											"    console.log(\"===============================================================================================\");",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"    console.log(\"================ Split process has started for order \" + pm.collectionVariables.get(\"orderId\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ================\");",
											"    console.log(\"===============================================================================================\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0592e60a-26c2-4980-9f90-7a39cec474ed",
										"exec": [
											"console.log(\"==================================== Splitting the order ===================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "69f12ef9-e001-436a-9da7-449656f57d0c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"url": "https://co-{{ENV}}.takeofftech.io/order/split/{{orderId}}"
							},
							"response": []
						},
						{
							"name": "Get number of items from the order from Inv Snapshot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "badda9ed-79a8-478b-9b5c-b7f6f48b9acc",
										"exec": [
											"var data = pm.response.json();",
											"var inventory = [];",
											"inventory = data.success;",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson\")).products;",
											"",
											"console.log(\"========================= Calculating Products Quantity on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ==========================\");",
											"// console.log(products);",
											"products.forEach(prod => printProductQty(prod));",
											"",
											"function printProductQty(item) {",
											"    for( i = 0; i < inventory.length; i++) {",
											"            if(inventory[i][\"product-id\"] == item[\"product-id\"]  && inventory[i][\"address\"] == \"01K\") {",
											"                item[\"qty-total\"] = inventory[i][\"qty-total\"];",
											"                console.info(\"product-id: \" + item[\"product-id\"] + \", qty-total: \" + item[\"qty-total\"]);",
											"            }",
											"        }",
											"}",
											"console.log(\"===============================================================================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "40241d79-f142-44fc-afdb-04acd6567dd3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/shelves-snapshot",
								"description": "The script in the **Tests** tab will print the quantity of the products from **productsJson** collection variable (Products that were found beforehand in the Get Ambient and Chilled Products request)"
							},
							"response": []
						},
						{
							"name": "Get most recent products adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "312b38c7-79b9-45cd-9d45-30641aeb9b50",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"",
											"//get all adjusted products",
											"var productsMap = new Map;",
											"",
											"operations.forEach(op => {",
											"    if(!productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"    }",
											"",
											"    let item = {};",
											"    item[\"address\"] = op.address;",
											"    item[\"qty-before\"] = op[\"quantity-before\"];",
											"    item[\"qty\"] = op.quantity;",
											"    if(op.comment != null) {",
											"        item[\"comment\"] = op.comment;",
											"    }",
											"    productsMap.get(op.product)[\"adjustments\"].push(item);",
											"});",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(prods) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(prods, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"",
											"    var prodArr = Array.from(productsMap.keys());",
											"    ",
											"    for (j = 0; j < prodArr.length; j++) {",
											"        var prod = prodArr[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;  ",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"    }",
											"",
											"    console.log(\"=================== All items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ====================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ebe73c6-bc5b-491c-99c6-7a882ffa772e",
										"exec": [
											"var n = 240; //specify number of minutes (look up data for last N minutes)",
											"pm.collectionVariables.set(\"n\", n);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "44abc74a-da4e-4940-87b0-67c7d622a562",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/adjustments",
								"description": "Responce returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-req** tab:\n\n    var n = 240; //specify number of minutes (look up data for last N minutes)\n\nThe result is printed in the console in the format:</br>\n    \n    {\"product\":\"00077901008589\",\"address\":\"01K\",\"comment\":\"PO=2103091897737\",\"temperature-zone\":\"chilled\"}"
							},
							"response": []
						},
						{
							"name": "Cancel order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f6248c4-9eeb-4f2e-9a9d-7ed64570283c",
										"exec": [
											"setTimeout(function () { }, [1000]);",
											"",
											"var response = pm.response.json();",
											"",
											"console.log(\"order \" + response.id + \", status is \" + response.status);",
											"",
											"pm.test(\"Order status is cancelled\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.status).to.eql(\"cancelled\");",
											"});",
											"",
											"if (response.status == \"cancelled\") {",
											" console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" has been cancelled =======================\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eeb46db4-321b-45d1-9659-952a66fd1a91",
										"exec": [
											"console.log(\"================================= Cancelling an order ==================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "d44c1ffa-03c2-4291-a36f-c5532995c2cb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}"
									}
								],
								"url": {
									"raw": "https://api-{{ENV}}.takeofftech.io/api/order?order-id={{orderId}}&user-id=JqnNzDX3nDRZXlu9xnTlJuA6PqX2",
									"protocol": "https",
									"host": [
										"api-{{ENV}}",
										"takeofftech",
										"io"
									],
									"path": [
										"api",
										"order"
									],
									"query": [
										{
											"key": "order-id",
											"value": "{{orderId}}"
										},
										{
											"key": "user-id",
											"value": "JqnNzDX3nDRZXlu9xnTlJuA6PqX2"
										}
									]
								},
								"description": "Request cancels the order, created in CreateOrder Request."
							},
							"response": []
						},
						{
							"name": "Check specific item adjustments in last N minutes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30e78af8-6327-4580-84f9-1aee4dc3f838",
										"exec": [
											"var n = 240; //specify number of minutes (look up data for last N minutes)",
											"",
											"//specify products to look for adjustments",
											"var products = [\"00000000040273\", \"00041190465156\"];",
											"",
											"pm.collectionVariables.set(\"n\", n);",
											"pm.collectionVariables.set(\"products\", products);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "723c3e43-1010-4b16-95f3-866947958bda",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"var products = pm.collectionVariables.get(\"products\"); // products to look for adjustments",
											"var productsMap = new Map();",
											"",
											"products.forEach(prod => productsMap.set(prod, {\"message\":\"Adjustments are not found for current product\"}));",
											"",
											"operations.forEach(op => {",
											"    if(productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"",
											"        let item = {};",
											"        item[\"address\"] = op.address;",
											"        item[\"qty-before\"] = op[\"quantity-before\"];",
											"        item[\"qty\"] = op.quantity;",
											"        if(op.comment != null) {",
											"            item[\"comment\"] = op.comment;",
											"        }",
											"        productsMap.get(op.product)[\"adjustments\"].push(item);",
											"    }",
											"})",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"    ",
											"    for (j = 0; j < products.length; j++) {",
											"        var prod = products[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod && productsMap.get(prod).hasOwnProperty(\"adjustments\")) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(products);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"",
											"    }",
											"",
											"    console.log(\"=================== All items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ====================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "aa47ca15-ae0b-4baf-b4ac-09f1bd6f8afd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/adjustments",
								"description": "Response returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-req** tab:\n\n    var n = 5; //specify number of minutes (look up data for last N minutes)\n\nChange the product to look for in array: \n\n    //specify products to look for adjustments\n    var products = [\"123\"];\n    pm.collectionVariables.set(\"products\", products);\n\nThe result is printed in the console in the format:</br>\n    \n    00000000091688, chilled: {\"address\":\"01K\",\"qty-before\":8,\"qty\":-1,\"comment\":\"ORDER=29571874;\",\"qty-now\":7}"
							},
							"response": []
						}
					],
					"_postman_id": "46404b88-1f9b-40e9-a73c-ea40b3656f3c",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "997a17dd-3b5e-45f9-b247-466484e15480"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a9a1132e-7670-4764-8713-2f8a79a19512"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MFC 3",
					"item": [
						{
							"name": "Get Ambient and Chilled Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf27e745-93b7-4fc3-aa33-fe28cf9ffae7",
										"exec": [
											"//number of chilled products to be found (change the number if you need more)",
											"var c = 1;",
											"//number of ambient products to be found (change the number if you need more)",
											"var a = 2;",
											"",
											"var osrProducts = []; //all products from the selves-snapshot that match \"address=01K\"",
											"var qty = 30;",
											"var chilledItems = [];",
											"var ambientItems = [];",
											"var products = []; //result array to store all found products",
											"",
											"console.log(\"====================== Pulling Chilled and Ambient Products for \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ======================\");",
											"",
											"// clear any previously saved data",
											"pm.collectionVariables.unset('productsJson');",
											"",
											"var data = pm.response.json();",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getOsrProducts() {",
											"    data.success.forEach(shelf => {",
											"        if (shelf.address == \"01K\" && shelf[\"qty-total\"] >= qty) {",
											"        osrProducts.push(shelf[\"product-id\"]);",
											"     }",
											"    })",
											"}",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    getOsrProducts();",
											"",
											"    for (i = 0; i < osrProducts.length; ) {",
											"    ",
											"        if (i + 10 <= osrProducts.length) {",
											"        var prodArr = osrProducts.slice(i, i+30);",
											"",
											"        } else {",
											"            var prodArr = osrProducts.slice(i, osrProducts.length - 1);",
											"        }",
											"        ",
											"        //get Fulfillment articles",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"",
											"        //find ambient and chilled items and save to array",
											"        for (j = 0; j < prodArr.length; j++) {",
											"            var prod = prodArr[j];",
											"            ",
											"            if(ffResult[prod].value!= null) {",
											"                let temp = ffResult[prod].value[\"temperature-zone\"];",
											"                if(temp == \"chilled\" && chilledItems.length < c) {",
											"                    chilledItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"chilled\";",
											"                    ",
											"                    products.push(item);",
											"",
											"                } else if(temp == \"ambient\" && ambientItems.length < a) {",
											"                    ambientItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"ambient\";",
											"",
											"                    products.push(item);",
											"                    ",
											"                } else if(chilledItems.length == c && ambientItems.length == a) {",
											"                    break;",
											"                }",
											"            }    ",
											"        }",
											"",
											"        if(chilledItems.length == c && ambientItems.length == a) {",
											"            break;",
											"        }",
											"        i+=10;    ",
											"    }",
											"",
											"    // saving found products to json",
											"    var json = {};",
											"    json[\"products\"] = products; ",
											"    pm.collectionVariables.set('productsJson', JSON.stringify(json));",
											"",
											"    console.log(\"=================================== \" + products.length + \" products found \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ===================================\");",
											"",
											"    products.forEach(prod => console.log(prod));",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"})();",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "be0065d5-6a8d-47b8-9a12-5c42aa18f0ea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/shelves-snapshot",
								"description": "Response return the items stored on OSR (01K) shelves. The script in the **Tests** will then call the getFulfillmentArticle request to find the specified number of ambient and chilled items. </br>\nTo change the number of chilled and/or ambient items, go to Tests tab and change the var:\n\n    var c = 2; //number of chilled items\n    var a = 2; //number of ambient products\n\nThe resulted json array will be written in collection variable **productsJson**, to be later retrieved. </br>\n\n**Found Ambient and Chilled products are printed in console**"
							},
							"response": []
						},
						{
							"name": "CreateOrder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19c8dc53-ee89-4076-a4b2-cb9630a47f90",
										"exec": [
											"// env prod check",
											"var envIsProd = !(pm.environment.name.toLowerCase().indexOf(\"prod\") === -1);",
											"var runIsProd = pm.globals.get(\"RUN_IN_PROD\") === 'true';",
											"console.log(\"Running in env '\" + pm.environment.name + \"' [\" + (envIsProd ? \"prod\" : \"staging\") + \"]\");",
											"console.log(\"Confirmation string RUN_IN_PROD=\" + runIsProd);",
											"if (envIsProd && !runIsProd) {",
											"  throw Error(\"Running in prod is prohibited!\");",
											"}",
											"",
											"console.log(\"================================= Creating order on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ==================================\");",
											"",
											"//generate order number in format YYYYMMDDHHmm",
											"var moment = require('moment');",
											"var orderId = moment().format(\"YYYYMMDDHHmm\");",
											"",
											"pm.collectionVariables.set(\"orderId\", orderId);",
											"",
											"//set tomorrow's date for Order (date now + hr*min*s*ms)",
											"var tomorrow = (Date.now() + 24*60*60*1000);",
											"var targetDate = new Date(tomorrow).toISOString().slice(0,-13) + pm.environment.get(\"ORDER_TIME\");",
											"pm.collectionVariables.set(\"orderDateTime\", targetDate);",
											"",
											"//service-window-start for retailers on Service Contracts, fulfillment-datetime on MFC Cutoff",
											"var env = pm.environment.get(\"ENV\");",
											"var dateTimeParam;",
											"dateTimeParam = (env.includes(\"winter\")) ? \"fulfillment-datetime\" : \"service-window-start\";",
											"pm.collectionVariables.set(\"orderContractParam\",dateTimeParam);",
											"",
											"//generate order line items, using found chilled and ambient products",
											"var lineItems = [];",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson\")).products;",
											"products.forEach(prod => lineItems.push(lineItemJson(prod[\"product-id\"])));",
											"pm.collectionVariables.set(\"lineItems\",lineItems);",
											"",
											"console.info(\"Creating Order# \" + orderId + \" on \" + pm.environment.get('ENV') + \" \" + pm.environment.get(\"MFC_TOM_CODE\"));",
											"",
											"function lineItemJson(product) {",
											"    return JSON.stringify(",
											"        {",
											"            \"takeoff-item-ids\": [",
											"                product",
											"            ],",
											"            \"ecom-item-id\": product,",
											"            \"requested-quantity\": 1,",
											"            \"ecom-line-id\": \"1\"",
											"        })",
											"}",
											"if(env.includes(\"winter\")) {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"SPOKE_ID_1\"));",
											"} else {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"MFC_TOM_CODE\"));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7e17c311-4526-447b-aa1c-73b2d1a43aee",
										"exec": [
											"var jsondata = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Expect response success: true\", function() {",
											"    pm.expect(jsondata.success).is.equal(true);",
											"})",
											"",
											"if (pm.response.code != 200) {",
											"    console.log(\"!!! ERROR in Order creation!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"",
											"    if (jsondata.message.includes(\"Unconfigured mfc-cutoff-lite\") || ",
											"        jsondata.message.includes(\"No suitable contract found\")) {",
											"        console.log (\"Check MFC CUTOFF/Service Contract time in Environment Variables ORDER_TIME\");",
											"    }",
											"    console.log(\"===============================================================================================\");",
											"}",
											"",
											"if(jsondata.success) {",
											"    console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId\") + \" created successfully on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" =======================\");",
											"    console.log(\"===============================================================================================\");",
											"}",
											"pm.collectionVariables.unset(\"orderContractParam\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "af729981-1707-4441-8d0e-67ba29bea619",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ecom-status\": \"new\",\n    \"store-id\": \"{{MFC_TOM_CODE}}\",\n    \"{{orderContractParam}}\": \"{{orderDateTime}}\",\n    \"ecom-payment-status\": \"none\",\n    \"spoke-id\": \"{{spoke}}\",\n    \"stage-by-datetime\": \"{{orderDateTime}}\",\n    \"order-id\": \"{{orderId}}\",\n    \"shipping-label\": [\n        \"System QA\",\n        \"Test Order\",\n        \"Takeoff\"\n    ],\n    \"line-items\": [{{lineItems}}],\n    \"service-type\": \"DELIVERY\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://co-{{ENV}}.takeofftech.io/order",
								"description": "Creates an order, using OMS endpoint.</br>\n\nThe orderId is built in **Pre-req** in the format and saved into collection variable **orderId**:\n\n    var orderId = \"SQ_\" + date + \"_1\";\n\nAn example: **SQ_210309_1**</br>\n\nThe products retrived from the **productJson** collection variable, that are founf in \"Get Ambient and Chilled Items\" request"
							},
							"response": []
						},
						{
							"name": "orderSplit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecc4f508-7bcf-4a32-9032-51c08a7e8f5e",
										"exec": [
											"if (pm.response.code != 200) {",
											"    var jsondata = pm.response.json();",
											"    console.info(\"!!! ERROR in Order split!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"}",
											"pm.test(\"Success\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    ",
											"    if(jsondata.success)",
											"    console.log(\"================================ \"+ jsonData.message + \" ================================\");",
											"    console.log(\"===============================================================================================\");",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"    console.log(\"================ Split process has started for order \" + pm.collectionVariables.get(\"orderId\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ================\");",
											"    console.log(\"===============================================================================================\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0592e60a-26c2-4980-9f90-7a39cec474ed",
										"exec": [
											"console.log(\"==================================== Splitting the order ===================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "41f5755c-4b19-4ea8-8aaf-006141079b87",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"url": "https://co-{{ENV}}.takeofftech.io/order/split/{{orderId}}"
							},
							"response": []
						},
						{
							"name": "Get number of items from the order from Inv Snapshot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "badda9ed-79a8-478b-9b5c-b7f6f48b9acc",
										"exec": [
											"var data = pm.response.json();",
											"var inventory = [];",
											"inventory = data.success;",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson\")).products;",
											"",
											"console.log(\"========================= Calculating Products Quantity on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ==========================\");",
											"// console.log(products);",
											"products.forEach(prod => printProductQty(prod));",
											"",
											"function printProductQty(item) {",
											"    for( i = 0; i < inventory.length; i++) {",
											"            if(inventory[i][\"product-id\"] == item[\"product-id\"]  && inventory[i][\"address\"] == \"01K\") {",
											"                item[\"qty-total\"] = inventory[i][\"qty-total\"];",
											"                console.info(\"product-id: \" + item[\"product-id\"] + \", qty-total: \" + item[\"qty-total\"]);",
											"            }",
											"        }",
											"}",
											"console.log(\"===============================================================================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "3f77d102-bdf7-4736-8252-edf6f2ae1b2e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/shelves-snapshot",
								"description": "The script in the **Tests** tab will print the quantity of the products from **productsJson** collection variable (Products that were found beforehand in the Get Ambient and Chilled Products request)"
							},
							"response": []
						},
						{
							"name": "Get most recent products adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "312b38c7-79b9-45cd-9d45-30641aeb9b50",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"",
											"//get all adjusted products",
											"var productsMap = new Map;",
											"",
											"operations.forEach(op => {",
											"    if(!productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"    }",
											"",
											"    let item = {};",
											"    item[\"address\"] = op.address;",
											"    item[\"qty-before\"] = op[\"quantity-before\"];",
											"    item[\"qty\"] = op.quantity;",
											"    if(op.comment != null) {",
											"        item[\"comment\"] = op.comment;",
											"    }",
											"    productsMap.get(op.product)[\"adjustments\"].push(item);",
											"});",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(prods) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(prods, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"",
											"    var prodArr = Array.from(productsMap.keys());",
											"    ",
											"    for (j = 0; j < prodArr.length; j++) {",
											"        var prod = prodArr[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;  ",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"    }",
											"",
											"    console.log(\"=================== All items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ====================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ebe73c6-bc5b-491c-99c6-7a882ffa772e",
										"exec": [
											"var n = 240; //specify number of minutes (look up data for last N minutes)",
											"pm.collectionVariables.set(\"n\", n);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "64f8348d-ebd9-48f2-b0ae-316b65956633",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/adjustments",
								"description": "Responce returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-req** tab:\n\n    var n = 240; //specify number of minutes (look up data for last N minutes)\n\nThe result is printed in the console in the format:</br>\n    \n    {\"product\":\"00077901008589\",\"address\":\"01K\",\"comment\":\"PO=2103091897737\",\"temperature-zone\":\"chilled\"}"
							},
							"response": []
						},
						{
							"name": "Cancel order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f6248c4-9eeb-4f2e-9a9d-7ed64570283c",
										"exec": [
											"setTimeout(function () { }, [1000]);",
											"",
											"var response = pm.response.json();",
											"",
											"console.log(\"order \" + response.id + \", status is \" + response.status);",
											"",
											"pm.test(\"Order status is cancelled\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.status).to.eql(\"cancelled\");",
											"});",
											"",
											"if (response.status == \"cancelled\") {",
											" console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" has been cancelled =======================\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eeb46db4-321b-45d1-9659-952a66fd1a91",
										"exec": [
											"console.log(\"================================= Cancelling an order ==================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c8fedbbe-c035-40b3-87b6-9885b9dfbe05",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}"
									}
								],
								"url": {
									"raw": "https://api-{{ENV}}.takeofftech.io/api/order?order-id={{orderId}}&user-id=JqnNzDX3nDRZXlu9xnTlJuA6PqX2",
									"protocol": "https",
									"host": [
										"api-{{ENV}}",
										"takeofftech",
										"io"
									],
									"path": [
										"api",
										"order"
									],
									"query": [
										{
											"key": "order-id",
											"value": "{{orderId}}"
										},
										{
											"key": "user-id",
											"value": "JqnNzDX3nDRZXlu9xnTlJuA6PqX2"
										}
									]
								},
								"description": "Request cancels the order, created in CreateOrder Request."
							},
							"response": []
						},
						{
							"name": "Check specific item adjustments in last N minutes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30e78af8-6327-4580-84f9-1aee4dc3f838",
										"exec": [
											"var n = 240; //specify number of minutes (look up data for last N minutes)",
											"",
											"//specify products to look for adjustments",
											"var products = [\"00000000040273\", \"00041190465156\"];",
											"",
											"pm.collectionVariables.set(\"n\", n);",
											"pm.collectionVariables.set(\"products\", products);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "723c3e43-1010-4b16-95f3-866947958bda",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"var products = pm.collectionVariables.get(\"products\"); // products to look for adjustments",
											"var productsMap = new Map();",
											"",
											"products.forEach(prod => productsMap.set(prod, {\"message\":\"Adjustments are not found for current product\"}));",
											"",
											"operations.forEach(op => {",
											"    if(productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"",
											"        let item = {};",
											"        item[\"address\"] = op.address;",
											"        item[\"qty-before\"] = op[\"quantity-before\"];",
											"        item[\"qty\"] = op.quantity;",
											"        if(op.comment != null) {",
											"            item[\"comment\"] = op.comment;",
											"        }",
											"        productsMap.get(op.product)[\"adjustments\"].push(item);",
											"    }",
											"})",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE3\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE3\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"    ",
											"    for (j = 0; j < products.length; j++) {",
											"        var prod = products[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod && productsMap.get(prod).hasOwnProperty(\"adjustments\")) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(products);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"",
											"    }",
											"",
											"    console.log(\"=================== All items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE3\") + \" ====================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "1193fdc0-012e-4b73-880f-eb0fef7d151b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/adjustments",
								"description": "Response returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-req** tab:\n\n    var n = 5; //specify number of minutes (look up data for last N minutes)\n\nChange the product to look for in array: \n\n    //specify products to look for adjustments\n    var products = [\"123\"];\n    pm.collectionVariables.set(\"products\", products);\n\nThe result is printed in the console in the format:</br>\n    \n    00000000091688, chilled: {\"address\":\"01K\",\"qty-before\":8,\"qty\":-1,\"comment\":\"ORDER=29571874;\",\"qty-now\":7}"
							},
							"response": []
						}
					],
					"_postman_id": "a39639b6-87dd-4f57-ad83-12a758527264",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "997a17dd-3b5e-45f9-b247-466484e15480"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a9a1132e-7670-4764-8713-2f8a79a19512"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MFC 4",
					"item": [
						{
							"name": "Get Ambient and Chilled Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf27e745-93b7-4fc3-aa33-fe28cf9ffae7",
										"exec": [
											"//number of chilled products to be found (change the number if you need more)",
											"var c = 1;",
											"//number of ambient products to be found (change the number if you need more)",
											"var a = 2;",
											"",
											"var osrProducts = []; //all products from the selves-snapshot that match \"address=01K\"",
											"var qty = 30;",
											"var chilledItems = [];",
											"var ambientItems = [];",
											"var products = []; //result array to store all found products",
											"",
											"console.log(\"====================== Pulling Chilled and Ambient Products for \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ======================\");",
											"",
											"// clear any previously saved data",
											"pm.collectionVariables.unset('productsJson');",
											"",
											"var data = pm.response.json();",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getOsrProducts() {",
											"    data.success.forEach(shelf => {",
											"        if (shelf.address == \"01K\" && shelf[\"qty-total\"] >= qty) {",
											"        osrProducts.push(shelf[\"product-id\"]);",
											"     }",
											"    })",
											"}",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    getOsrProducts();",
											"",
											"    for (i = 0; i < osrProducts.length; ) {",
											"    ",
											"        if (i + 10 <= osrProducts.length) {",
											"        var prodArr = osrProducts.slice(i, i+30);",
											"",
											"        } else {",
											"            var prodArr = osrProducts.slice(i, osrProducts.length - 1);",
											"        }",
											"        ",
											"        //get Fulfillment articles",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"",
											"        //find ambient and chilled items and save to array",
											"        for (j = 0; j < prodArr.length; j++) {",
											"            var prod = prodArr[j];",
											"            ",
											"            if(ffResult[prod].value!= null) {",
											"                let temp = ffResult[prod].value[\"temperature-zone\"];",
											"                if(temp == \"chilled\" && chilledItems.length < c) {",
											"                    chilledItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"chilled\";",
											"                    ",
											"                    products.push(item);",
											"",
											"                } else if(temp == \"ambient\" && ambientItems.length < a) {",
											"                    ambientItems.push(prod);",
											"                    let item = {};",
											"                    item[\"product-id\"] = prod;",
											"                    item[\"name\"] = ffResult[prod].value.name;",
											"                    item[\"temperature-zone\"] = \"ambient\";",
											"",
											"                    products.push(item);",
											"                    ",
											"                } else if(chilledItems.length == c && ambientItems.length == a) {",
											"                    break;",
											"                }",
											"            }    ",
											"        }",
											"",
											"        if(chilledItems.length == c && ambientItems.length == a) {",
											"            break;",
											"        }",
											"        i+=10;    ",
											"    }",
											"",
											"    // saving found products to json",
											"    var json = {};",
											"    json[\"products\"] = products; ",
											"    pm.collectionVariables.set('productsJson', JSON.stringify(json));",
											"",
											"    console.log(\"=================================== \" + products.length + \" products found \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ===================================\");",
											"",
											"    products.forEach(prod => console.log(prod));",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"})();",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "655a296d-7e63-43d8-a22f-b3c58f31c052",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/shelves-snapshot",
								"description": "Response return the items stored on OSR (01K) shelves. The script in the **Tests** will then call the getFulfillmentArticle request to find the specified number of ambient and chilled items. </br>\nTo change the number of chilled and/or ambient items, go to Tests tab and change the var:\n\n    var c = 2; //number of chilled items\n    var a = 2; //number of ambient products\n\nThe resulted json array will be written in collection variable **productsJson**, to be later retrieved. </br>\n\n**Found Ambient and Chilled products are printed in console**"
							},
							"response": []
						},
						{
							"name": "CreateOrder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19c8dc53-ee89-4076-a4b2-cb9630a47f90",
										"exec": [
											"// env prod check",
											"var envIsProd = !(pm.environment.name.toLowerCase().indexOf(\"prod\") === -1);",
											"var runIsProd = pm.globals.get(\"RUN_IN_PROD\") === 'true';",
											"console.log(\"Running in env '\" + pm.environment.name + \"' [\" + (envIsProd ? \"prod\" : \"staging\") + \"]\");",
											"console.log(\"Confirmation string RUN_IN_PROD=\" + runIsProd);",
											"if (envIsProd && !runIsProd) {",
											"  throw Error(\"Running in prod is prohibited!\");",
											"}",
											"",
											"console.log(\"================================= Creating order on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ==================================\");",
											"",
											"//generate order number in format YYYYMMDDHHmm",
											"var moment = require('moment');",
											"var orderId = moment().format(\"YYYYMMDDHHmm\");",
											"",
											"pm.collectionVariables.set(\"orderId\", orderId);",
											"",
											"//set tomorrow's date for Order (date now + hr*min*s*ms)",
											"var tomorrow = (Date.now() + 24*60*60*1000);",
											"var targetDate = new Date(tomorrow).toISOString().slice(0,-13) + pm.environment.get(\"ORDER_TIME\");",
											"pm.collectionVariables.set(\"orderDateTime\", targetDate);",
											"",
											"//service-window-start for retailers on Service Contracts, fulfillment-datetime on MFC Cutoff",
											"var env = pm.environment.get(\"ENV\");",
											"var dateTimeParam;",
											"dateTimeParam = (env.includes(\"winter\")) ? \"fulfillment-datetime\" : \"service-window-start\";",
											"pm.collectionVariables.set(\"orderContractParam\",dateTimeParam);",
											"",
											"//generate order line items, using found chilled and ambient products",
											"var lineItems = [];",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson\")).products;",
											"products.forEach(prod => lineItems.push(lineItemJson(prod[\"product-id\"])));",
											"pm.collectionVariables.set(\"lineItems\",lineItems);",
											"",
											"console.info(\"Creating Order# \" + orderId + \" on \" + pm.environment.get('ENV') + \" \" + pm.environment.get(\"MFC_TOM_CODE\"));",
											"",
											"function lineItemJson(product) {",
											"    return JSON.stringify(",
											"        {",
											"            \"takeoff-item-ids\": [",
											"                product",
											"            ],",
											"            \"ecom-item-id\": product,",
											"            \"requested-quantity\": 1,",
											"            \"ecom-line-id\": \"1\"",
											"        })",
											"}",
											"if(env.includes(\"winter\")) {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"SPOKE_ID_1\"));",
											"} else {",
											"    pm.collectionVariables.set(\"spoke\", pm.environment.get(\"MFC_TOM_CODE\"));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7e17c311-4526-447b-aa1c-73b2d1a43aee",
										"exec": [
											"var jsondata = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Expect response success: true\", function() {",
											"    pm.expect(jsondata.success).is.equal(true);",
											"})",
											"",
											"if (pm.response.code != 200) {",
											"    console.log(\"!!! ERROR in Order creation!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"",
											"    if (jsondata.message.includes(\"Unconfigured mfc-cutoff-lite\") || ",
											"        jsondata.message.includes(\"No suitable contract found\")) {",
											"        console.log (\"Check MFC CUTOFF/Service Contract time in Environment Variables ORDER_TIME\");",
											"    }",
											"    console.log(\"===============================================================================================\");",
											"}",
											"",
											"if(jsondata.success) {",
											"    console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId\") + \" created successfully on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" =======================\");",
											"    console.log(\"===============================================================================================\");",
											"}",
											"pm.collectionVariables.unset(\"orderContractParam\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "4e36a1df-705b-4fd4-bfa6-c44381759836",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ecom-status\": \"new\",\n    \"store-id\": \"{{MFC_TOM_CODE}}\",\n    \"{{orderContractParam}}\": \"{{orderDateTime}}\",\n    \"ecom-payment-status\": \"none\",\n    \"spoke-id\": \"{{spoke}}\",\n    \"stage-by-datetime\": \"{{orderDateTime}}\",\n    \"order-id\": \"{{orderId}}\",\n    \"shipping-label\": [\n        \"System QA\",\n        \"Test Order\",\n        \"Takeoff\"\n    ],\n    \"line-items\": [{{lineItems}}],\n    \"service-type\": \"DELIVERY\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://co-{{ENV}}.takeofftech.io/order",
								"description": "Creates an order, using OMS endpoint.</br>\n\nThe orderId is built in **Pre-req** in the format and saved into collection variable **orderId**:\n\n    var orderId = \"SQ_\" + date + \"_1\";\n\nAn example: **SQ_210309_1**</br>\n\nThe products retrived from the **productJson** collection variable, that are founf in \"Get Ambient and Chilled Items\" request"
							},
							"response": []
						},
						{
							"name": "orderSplit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecc4f508-7bcf-4a32-9032-51c08a7e8f5e",
										"exec": [
											"if (pm.response.code != 200) {",
											"    var jsondata = pm.response.json();",
											"    console.info(\"!!! ERROR in Order split!!! Response code: \" + pm.response.code + \", \" + JSON.stringify(jsondata));",
											"}",
											"pm.test(\"Success\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    ",
											"    if(jsondata.success)",
											"    console.log(\"================================ \"+ jsonData.message + \" ================================\");",
											"    console.log(\"===============================================================================================\");",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"    console.log(\"================ Split process has started for order \" + pm.collectionVariables.get(\"orderId\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ================\");",
											"    console.log(\"===============================================================================================\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0592e60a-26c2-4980-9f90-7a39cec474ed",
										"exec": [
											"console.log(\"==================================== Splitting the order ===================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "2d593e28-688b-427f-822e-d6537633b46b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}",
										"type": "text"
									}
								],
								"url": "https://co-{{ENV}}.takeofftech.io/order/split/{{orderId}}"
							},
							"response": []
						},
						{
							"name": "Get number of items from the order from Inv Snapshot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "badda9ed-79a8-478b-9b5c-b7f6f48b9acc",
										"exec": [
											"var data = pm.response.json();",
											"var inventory = [];",
											"inventory = data.success;",
											"var products = [];",
											"products = JSON.parse(pm.collectionVariables.get(\"productsJson\")).products;",
											"",
											"console.log(\"========================= Calculating Products Quantity on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ==========================\");",
											"// console.log(products);",
											"products.forEach(prod => printProductQty(prod));",
											"",
											"function printProductQty(item) {",
											"    for( i = 0; i < inventory.length; i++) {",
											"            if(inventory[i][\"product-id\"] == item[\"product-id\"]  && inventory[i][\"address\"] == \"01K\") {",
											"                item[\"qty-total\"] = inventory[i][\"qty-total\"];",
											"                console.info(\"product-id: \" + item[\"product-id\"] + \", qty-total: \" + item[\"qty-total\"]);",
											"            }",
											"        }",
											"}",
											"console.log(\"===============================================================================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "05051a9e-ba15-4ad2-9017-11a811c3e31f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Token",
										"type": "text",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"args\": [\n    \"{{MFC_TOM_CODE}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/shelves-snapshot",
								"description": "The script in the **Tests** tab will print the quantity of the products from **productsJson** collection variable (Products that were found beforehand in the Get Ambient and Chilled Products request)"
							},
							"response": []
						},
						{
							"name": "Get most recent products adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "312b38c7-79b9-45cd-9d45-30641aeb9b50",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"",
											"//get all adjusted products",
											"var productsMap = new Map;",
											"",
											"operations.forEach(op => {",
											"    if(!productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"    }",
											"",
											"    let item = {};",
											"    item[\"address\"] = op.address;",
											"    item[\"qty-before\"] = op[\"quantity-before\"];",
											"    item[\"qty\"] = op.quantity;",
											"    if(op.comment != null) {",
											"        item[\"comment\"] = op.comment;",
											"    }",
											"    productsMap.get(op.product)[\"adjustments\"].push(item);",
											"});",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(prods) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(prods, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"",
											"    var prodArr = Array.from(productsMap.keys());",
											"    ",
											"    for (j = 0; j < prodArr.length; j++) {",
											"        var prod = prodArr[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;  ",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(prodArr);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"    }",
											"",
											"    console.log(\"=================== All items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" ====================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ebe73c6-bc5b-491c-99c6-7a882ffa772e",
										"exec": [
											"var n = 240; //specify number of minutes (look up data for last N minutes)",
											"pm.collectionVariables.set(\"n\", n);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "df0766eb-7bba-453d-8e7f-6f7f01111de7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/adjustments",
								"description": "Responce returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-req** tab:\n\n    var n = 240; //specify number of minutes (look up data for last N minutes)\n\nThe result is printed in the console in the format:</br>\n    \n    {\"product\":\"00077901008589\",\"address\":\"01K\",\"comment\":\"PO=2103091897737\",\"temperature-zone\":\"chilled\"}"
							},
							"response": []
						},
						{
							"name": "Cancel order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f6248c4-9eeb-4f2e-9a9d-7ed64570283c",
										"exec": [
											"setTimeout(function () { }, [1000]);",
											"",
											"var response = pm.response.json();",
											"",
											"console.log(\"order \" + response.id + \", status is \" + response.status);",
											"",
											"pm.test(\"Order status is cancelled\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.status).to.eql(\"cancelled\");",
											"});",
											"",
											"if (response.status == \"cancelled\") {",
											" console.log(\"===================== Order \" + pm.collectionVariables.get(\"orderId\") + \" on \" + pm.environment.get(\"MFC_TOM_CODE\") + \" has been cancelled =======================\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eeb46db4-321b-45d1-9659-952a66fd1a91",
										"exec": [
											"console.log(\"================================= Cancelling an order ==================================\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "3daab774-f7ab-4eaf-8aab-285d870642e5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Token",
										"value": "{{X-TOKEN}}"
									}
								],
								"url": {
									"raw": "https://api-{{ENV}}.takeofftech.io/api/order?order-id={{orderId}}&user-id=JqnNzDX3nDRZXlu9xnTlJuA6PqX2",
									"protocol": "https",
									"host": [
										"api-{{ENV}}",
										"takeofftech",
										"io"
									],
									"path": [
										"api",
										"order"
									],
									"query": [
										{
											"key": "order-id",
											"value": "{{orderId}}"
										},
										{
											"key": "user-id",
											"value": "JqnNzDX3nDRZXlu9xnTlJuA6PqX2"
										}
									]
								},
								"description": "Request cancels the order, created in CreateOrder Request."
							},
							"response": []
						},
						{
							"name": "Check specific item adjustments in last N minutes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30e78af8-6327-4580-84f9-1aee4dc3f838",
										"exec": [
											"var n = 240; //specify number of minutes (look up data for last N minutes)",
											"",
											"//specify products to look for adjustments",
											"var products = [\"00000000040273\", \"00041190465156\"];",
											"",
											"pm.collectionVariables.set(\"n\", n);",
											"pm.collectionVariables.set(\"products\", products);",
											"",
											"//set time FROM and TO",
											"var date = new Date();",
											"var timeNow = date.getTime();",
											"var timePast = date.getTime() - n*60*1000;",
											"",
											"pm.collectionVariables.set(\"timeNow\", timeNow);",
											"pm.collectionVariables.set(\"timePast\", timePast);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "723c3e43-1010-4b16-95f3-866947958bda",
										"exec": [
											"var data = pm.response.json();",
											"var operations = [];",
											"operations = data.success;",
											"var products = pm.collectionVariables.get(\"products\"); // products to look for adjustments",
											"var productsMap = new Map();",
											"",
											"products.forEach(prod => productsMap.set(prod, {\"message\":\"Adjustments are not found for current product\"}));",
											"",
											"operations.forEach(op => {",
											"    if(productsMap.has(op.product)) {",
											"        var adj = [];",
											"        var prod = {};",
											"        prod[\"adjustments\"] = adj;",
											"        productsMap.set(op.product, prod);",
											"",
											"        let item = {};",
											"        item[\"address\"] = op.address;",
											"        item[\"qty-before\"] = op[\"quantity-before\"];",
											"        item[\"qty\"] = op.quantity;",
											"        if(op.comment != null) {",
											"            item[\"comment\"] = op.comment;",
											"        }",
											"        productsMap.get(op.product)[\"adjustments\"].push(item);",
											"    }",
											"})",
											"",
											"var fulfillmentArticleRequest =  {",
											"    url: 'https://api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/product/fulfillment-article/v2/' + pm.environment.get(\"MFC_TOM_CODE4\") + '?explain=false',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: \"\"        ",
											"};",
											"",
											"function getFulfillmentArticles(products) {",
											"",
											"    fulfillmentArticleRequest.body = JSON.stringify(products, null, 2);",
											"    return sendRequest(fulfillmentArticleRequest);",
											"}",
											"",
											"var snapshotRequest =  {",
											"    url: 'https://ims-api-' + pm.environment.get(\"ENV\") + '.takeofftech.io/api/v1/command-server/message/shelves-snapshot',",
											"    method: 'POST',",
											"    header: {",
											"                'X-Token': pm.environment.get('X-TOKEN'), ",
											"                'Content-Type':'application/json', ",
											"            },",
											"    body: JSON.stringify({",
											"            \"args\": [pm.environment.get(\"MFC_TOM_CODE4\")]",
											"        })",
											"};",
											"",
											"function getSnapshot() {",
											"    return sendRequest(snapshotRequest);",
											"}",
											"",
											"function sendRequest(req) {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(req, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"            return resolve(res.json());",
											"        })",
											"    });",
											"}",
											"",
											"const _dummy = setInterval(() => {}, 300000);",
											"(async function main() {",
											"",
											"    //get Inventory snapshot and collect qty on shelf after adjustment",
											"    var snapshot = (await getSnapshot()).success;",
											"    ",
											"    for (j = 0; j < products.length; j++) {",
											"        var prod = products[j];",
											"",
											"        //save qty after",
											"        snapshot.forEach(shelf => {",
											"            if (shelf[\"product-id\"] === prod && productsMap.get(prod).hasOwnProperty(\"adjustments\")) {",
											"                productsMap.get(prod)[\"adjustments\"].forEach (adj => {",
											"                    if(shelf[\"address\"] == adj.address) {",
											"                        let qtyNow = shelf[\"qty-total\"];",
											"                        adj[\"qty-now\"] = qtyNow;",
											"                    }  ",
											"                })",
											"            } ",
											"        })",
											"",
											"        //get Fulfillment articles and save product temperature",
											"        var ffResult = await getFulfillmentArticles(products);",
											"        let temp = ffResult[prod].value[\"temperature-zone\"][0];",
											"        productsMap.get(prod)[\"temperature-zone\"] = temp;",
											"",
											"    }",
											"",
											"    console.log(\"=================== All items adjusted  during last \" + pm.collectionVariables.get(\"n\") + \" minutes on \" + pm.environment.get(\"MFC_TOM_CODE4\") + \" ====================\");",
											"",
											"    for (var key of productsMap.keys()) {",
											"        printMap(productsMap.get(key)[\"adjustments\"], key);",
											"    }  ",
											"",
											"    function printMap(actions, key) {",
											"        actions.forEach (action => {",
											"            console.log(key + \", \" + productsMap.get(key)[\"temperature-zone\"] + \": \" + JSON.stringify(action));",
											"        })",
											"    }   ",
											"",
											"",
											"    console.log(\"===============================================================================================\");",
											"",
											"    clearInterval(_dummy)",
											"",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "287b6c27-d3d7-4163-89ae-ee144cff93e0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-token",
										"value": "{{X-TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"args\": [  \n     \"{{MFC_TOM_CODE}}\", \"{{timePast}}\", \"{{timeNow}}\"  \n   ]  \n }",
									"options": {
										"raw": {}
									}
								},
								"url": "https://ims-api-{{ENV}}.takeofftech.io/api/v1/command-server/message/adjustments",
								"description": "Response returns the data of recent adjustments.</br>\nTo specify the time range, change the number of minutes in the **Pre-req** tab:\n\n    var n = 5; //specify number of minutes (look up data for last N minutes)\n\nChange the product to look for in array: \n\n    //specify products to look for adjustments\n    var products = [\"123\"];\n    pm.collectionVariables.set(\"products\", products);\n\nThe result is printed in the console in the format:</br>\n    \n    00000000091688, chilled: {\"address\":\"01K\",\"qty-before\":8,\"qty\":-1,\"comment\":\"ORDER=29571874;\",\"qty-now\":7}"
							},
							"response": []
						}
					],
					"_postman_id": "50794079-a42f-460a-a9be-d97e5e6681a1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "997a17dd-3b5e-45f9-b247-466484e15480"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a9a1132e-7670-4764-8713-2f8a79a19512"
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"_postman_id": "870ae0cf-2aec-4b68-be24-915d1b9bc7a9",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "75f92236-71f2-4e0d-a579-a587618f0ba4",
						"type": "text/javascript",
						"exec": [
							"if(pm.environment.has('NEW_ENV')){",
							"    var regex = /{.*/i",
							"    var uri = pm.request.url.host.join('.')",
							"    uri = uri.replace(regex,pm.environment.get('NEW_ENV'))",
							" pm.request.url.host = uri",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dad21da0-d09d-45a6-aef0-1ff01c58f464",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// //Get X-Token",
					"",
					"// const url = \"https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword\" + \"?key=\" + pm.environment.get(\"google_api_key\");",
					"",
					"// const getXToken = {",
					"//   url: url,",
					"//   method: 'POST',",
					"//   header: {",
					"//     \"Content-Type\": \"application/json\"",
					"//   },",
					"//   body: {",
					"//         mode: 'raw',",
					"//         raw: JSON.stringify({\"email\": pm.environment.get(\"email\"), \"password\": pm.environment.get(\"password\"), \"returnSecureToken\": true})",
					"//     }",
					"// };",
					"",
					"// pm.sendRequest(getXToken, function (err, res) {",
					"//   console.log(err ? err : res.json());",
					"//   pm.globals.set(\"X-Token\", res.json().idToken);",
					"// });"
				],
				"id": "4a9f4aaf-a0f3-4b26-aa47-a2eec3cb0684"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (pm.response.code == 401) {",
					"    console.log(\"You're not autorized! Please Authorize by sending getToken request!\")",
					"}"
				],
				"id": "1e9a6827-e0f5-49b7-a79e-158c993bddda"
			}
		}
	],
	"variable": [
		{
			"id": "5341516d-c4d1-4e21-aaf2-aed467caa62b",
			"key": "orderId",
			"value": "",
			"type": "string"
		},
		{
			"id": "277397c2-9b21-4fa8-80b3-859b1930d5f4",
			"key": "lineItems",
			"value": "",
			"type": "string"
		},
		{
			"id": "ac6bd82b-4e74-4dc6-9911-13a94039f5fb",
			"key": "productsJson",
			"value": "",
			"type": "string"
		},
		{
			"id": "e0b9e924-6cd7-45cf-a1f2-7b5d44c6c9bd",
			"key": "timeNow",
			"value": "",
			"type": "string"
		},
		{
			"id": "22af44c7-d34b-48cc-b08e-f1f109619a15",
			"key": "timePast",
			"value": "",
			"type": "string"
		},
		{
			"id": "8e7df9d7-f99d-4e17-a606-92b54a9f8af4",
			"key": "n",
			"value": "",
			"type": "string"
		},
		{
			"id": "1e365540-ce75-4629-a0cb-fd26a96c8fcc",
			"key": "products",
			"value": "",
			"type": "string"
		},
		{
			"id": "3e1fcf72-1cf1-4a49-8658-4bf4432fcf21",
			"key": "orderDateTime",
			"value": "",
			"type": "string"
		},
		{
			"id": "3ad82e28-3b04-4711-bf9f-500cc41e1b43",
			"key": "productsJson2",
			"value": "",
			"type": "string"
		},
		{
			"id": "65afded8-716d-495e-b730-3b3eaacf40c6",
			"key": "productsJson3",
			"value": "",
			"type": "string"
		},
		{
			"id": "d2bd6221-407a-4a48-8eae-7fe778e59685",
			"key": "orderId2",
			"value": "",
			"type": "string"
		},
		{
			"id": "9c3d1472-7315-4ef7-be6d-fed009b4fd65",
			"key": "orderId3",
			"value": "",
			"type": "string"
		},
		{
			"id": "5ae6aad4-8f0a-4491-806b-da43057cf114",
			"key": "tote_id",
			"value": "",
			"type": "string"
		}
	]
}